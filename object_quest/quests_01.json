{
  "quests": [
    {
      "title": "The Humble Adventurer",
      "description": "Every quest needs a hero! Create a basic Adventurer class that stores a name and a level.",
      "success_message": "Well done! Your adventurer is ready to begin their journey!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        # Your code here\n        pass",
      "test_code": "class TestAdventurer(unittest.TestCase):\n    def test_adventurer_creation(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        self.assertEqual(hero.name, \"Sir Robin\", \"Hero should remember their name\")\n        self.assertEqual(hero.level, 1, \"Hero should start at the given level\")",
      "hints": ["Store the name and level as instance variables using self"]
    },
    {
      "title": "A Brave Introduction",
      "description": "Our hero needs a proper introduction! Add a greet method that returns: 'I am {name}, a level {level} adventurer!'",
      "success_message": "Excellent! Your adventurer can now introduce themselves properly!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n    \n    def greet(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestGreeting(unittest.TestCase):\n    def test_greeting(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        expected = \"I am Sir Robin, a level 1 adventurer!\"\n        self.assertEqual(hero.greet(), expected, \"Greeting should include name and level\")",
      "hints": ["Use an f-string to create the message with self.name and self.level"]
    },
    {
      "title": "The Backpack",
      "description": "Every adventurer needs a backpack! Initialize your Adventurer with an empty list called inventory.",
      "success_message": "Great! Your adventurer now has a place to store their items!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        # Add inventory here",
      "test_code": "class TestInventory(unittest.TestCase):\n    def test_initial_inventory(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        self.assertEqual(hero.inventory, [], \"Inventory should start empty\")",
      "hints": ["Initialize self.inventory as an empty list []"]
    },
    {
      "title": "Pack Your Bags",
      "description": "Time to pack! Add an add_item method that adds an item to the inventory.",
      "success_message": "Perfect! Your adventurer can now collect items on their journey!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def add_item(self, item: str):\n        # Your code here\n        pass",
      "test_code": "class TestAddItem(unittest.TestCase):\n    def test_adding_items(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        hero.add_item(\"brave brave sword\")\n        self.assertIn(\"brave brave sword\", hero.inventory, \"Item should be in inventory\")\n        self.assertEqual(len(hero.inventory), 1, \"Inventory should have one item\")",
      "hints": ["Use the append method to add the item to self.inventory"]
    },
    {
      "title": "What's in the Bag?",
      "description": "Add a has_item method that returns True if an item is in the inventory, False otherwise.",
      "success_message": "Excellent! Your adventurer can now check their inventory!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        # Your code here\n        pass",
      "test_code": "class TestHasItem(unittest.TestCase):\n    def test_item_check(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        hero.add_item(\"brave brave sword\")\n        self.assertTrue(hero.has_item(\"brave brave sword\"), \"Should find existing item\")\n        self.assertFalse(hero.has_item(\"running shoes\"), \"Should not find nonexistent item\")",
      "hints": ["Use the 'in' operator to check if the item is in self.inventory"]
    },
    {
      "title": "Level Up!",
      "description": "Add a level_up method that increases the adventurer's level by 1 and returns 'Huzzah! Level {new_level}!'",
      "success_message": "Outstanding! Your adventurer grows stronger!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def level_up(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestLevelUp(unittest.TestCase):\n    def test_leveling(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        message = hero.level_up()\n        self.assertEqual(hero.level, 2, \"Level should increase by 1\")\n        self.assertEqual(message, \"Huzzah! Level 2!\", \"Should show celebration message\")",
      "hints": ["Increment self.level and return a message using an f-string"]
    },
    {
      "title": "The Mighty Warrior",
      "description": "Create a Warrior class that inherits from Adventurer and starts with a 'rusty sword' in their inventory.",
      "success_message": "Outstanding! Your Warrior class is ready for battle!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY. Scroll down for Warrior. \nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# Create your Warrior class below\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        # Your code here\n        pass",
      "test_code": "class TestWarrior(unittest.TestCase):\n    def test_warrior_creation(self):\n        warrior = Warrior(\"She-Ra\", 1)\n        self.assertEqual(warrior.name, \"She-Ra\", \"Warrior should have a name\")\n        self.assertEqual(warrior.level, 1, \"Warrior should have a level\")\n        self.assertIn(\"rusty sword\", warrior.inventory, \"Warrior should start with a rusty sword\")",
      "hints": ["Call the parent class's __init__ using super(), then add the sword to inventory"]
    },
    {
      "title": "Battle Cry",
      "description": "Give Warriors a battle_cry method that returns: 'For the honor of {name}!'",
      "success_message": "By the power of Grayskull! Your warrior has found their voice!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY. Scroll down for Warrior.\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# The Warrior class with __init__ is provided - DO NOT MODIFY\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"rusty sword\")\n    \n    def battle_cry(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestBattleCry(unittest.TestCase):\n    def test_warrior_cry(self):\n        warrior = Warrior(\"She-Ra\", 1)\n        self.assertEqual(warrior.battle_cry(), \"For the honor of She-Ra!\", \"Battle cry should use warrior's name\")",
      "hints": ["Use an f-string with self.name to create the battle cry"]
    },
    {
      "title": "The Wise Wizard",
      "description": "Create a Wizard class that inherits from Adventurer and starts with a 'gnarled staff' and 'mysterious potion'.",
      "success_message": "Magnificent! Your Wizard class is ready to cast some spells!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY. Scroll down for Wizard.\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# Create your Wizard class below\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        # Your code here\n        pass",
      "test_code": "class TestWizard(unittest.TestCase):\n    def test_wizard_creation(self):\n        wizard = Wizard(\"Tim the Enchanter\", 1)\n        self.assertIn(\"gnarled staff\", wizard.inventory, \"Wizard should have a staff\")\n        self.assertIn(\"mysterious potion\", wizard.inventory, \"Wizard should have a potion\")\n        self.assertEqual(len(wizard.inventory), 2, \"Wizard should start with exactly 2 items\")",
      "hints": ["Call super().__init__, then append both items to the inventory"]
    },
    {
      "title": "Magic Words",
      "description": "Give Wizards a cast_spell method that returns: '*waves staff* Alakazam, {name} casts magic missile!'",
      "success_message": "YOU SHALL PASS! Your wizard can now cast spells!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY. Scroll down for Wizard.\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# The Wizard class with __init__ is provided - DO NOT MODIFY\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"gnarled staff\")\n        self.inventory.append(\"mysterious potion\")\n    \n    def cast_spell(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestSpellCasting(unittest.TestCase):\n    def test_wizard_spell(self):\n        wizard = Wizard(\"Tim the Enchanter\", 1)\n        expected = \"*waves staff* Alakazam, Tim the Enchanter casts magic missile!\"\n        self.assertEqual(wizard.cast_spell(), expected, \"Spell message should include wizard's name\")",
      "hints": ["Use an f-string to create the spell message with self.name"]
    }
  ]
}
