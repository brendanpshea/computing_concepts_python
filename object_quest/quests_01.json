{
  "quests": [
    {
      "title": "The Humble Adventurer",
      "description": "Every quest needs a hero! Create a basic Adventurer class that stores a name and a level.",
      "success_message": "Well done! Your adventurer is ready to begin their journey!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        # Your code here\n        pass",
      "test_code": "class TestAdventurer(unittest.TestCase):\n    def test_adventurer_creation(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        self.assertEqual(hero.name, \"Sir Robin\", \"Hero should remember their name\")\n        self.assertEqual(hero.level, 1, \"Hero should start at the given level\")",
      "hints": ["Store the name and level as instance variables using self"]
    },
    {
      "title": "Creating Your Party",
      "description": "Adventure awaits! Create a party of three different adventurers with unique names and return them in a list.",
      "success_message": "Your party is assembled and ready for adventure!",
      "initial_code": "# The Adventurer class is provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n\ndef create_party() -> list:\n    # Create three Adventurer objects with different names\n    # Return them in a list\n    # Your code here\n    pass",
      "test_code": "class TestPartyCreation(unittest.TestCase):\n    def test_party_creation(self):\n        party = create_party()\n        # Check that we have three adventurers\n        self.assertEqual(len(party), 3, \"Party should have exactly 3 members\")\n        # Check that they're all Adventurer objects\n        for member in party:\n            self.assertIsInstance(member, Adventurer, \"Party members should be Adventurer objects\")\n        # Check that all names are unique\n        names = [member.name for member in party]\n        self.assertEqual(len(names), len(set(names)), \"All party members should have unique names\")",
      "hints": ["Create three different Adventurer objects with different name strings", "Store your adventurers in a list and return it"]
    },
    {
      "title": "A Brave Introduction",
      "description": "Our hero needs a proper introduction! Add a greet method that returns: 'I am {name}, a level {level} adventurer!'",
      "success_message": "Excellent! Your adventurer can now introduce themselves properly!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n    \n    def greet(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestGreeting(unittest.TestCase):\n    def test_greeting(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        expected = \"I am Sir Robin, a level 1 adventurer!\"\n        self.assertEqual(hero.greet(), expected, \"Greeting should include name and level\")",
      "hints": ["Use an f-string to create the message with self.name and self.level"]
    },
    {
      "title": "The Party Introduction",
      "description": "Help your party introduce themselves! Create a function that takes a list of adventurers and returns a string with all their greetings joined together.",
      "success_message": "Your party can now introduce themselves to everyone they meet!",
      "initial_code": "# The Adventurer class is provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n\ndef party_introduction(adventurers: list) -> str:\n    # Take a list of Adventurer objects\n    # Call the greet method on each adventurer\n    # Join all greetings with a newline character and return\n    # Your code here\n    pass",
      "test_code": "class TestPartyIntroduction(unittest.TestCase):\n    def test_party_introduction(self):\n        party = [\n            Adventurer(\"Sir Robin\", 1),\n            Adventurer(\"Galahad\", 2),\n            Adventurer(\"Lancelot\", 3)\n        ]\n        expected = \"I am Sir Robin, a level 1 adventurer!\\nI am Galahad, a level 2 adventurer!\\nI am Lancelot, a level 3 adventurer!\"\n        self.assertEqual(party_introduction(party), expected, \"Party introduction should include all members' greetings\")",
      "hints": ["Use a loop to call greet() on each adventurer", "Collect the results in a list", "Use '\\n'.join(results) to combine them"]
    },
    {
      "title": "The Backpack",
      "description": "Every adventurer needs a backpack! Initialize your Adventurer with an empty list called inventory.",
      "success_message": "Great! Your adventurer now has a place to store their items!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        # Add inventory here",
      "test_code": "class TestInventory(unittest.TestCase):\n    def test_initial_inventory(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        self.assertEqual(hero.inventory, [], \"Inventory should start empty\")",
      "hints": ["Initialize self.inventory as an empty list []"]
    },
    {
      "title": "Pack Your Bags",
      "description": "Time to pack! Add an add_item method that adds an item to the inventory.",
      "success_message": "Perfect! Your adventurer can now collect items on their journey!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def add_item(self, item: str):\n        # Your code here\n        pass",
      "test_code": "class TestAddItem(unittest.TestCase):\n    def test_adding_items(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        hero.add_item(\"brave brave sword\")\n        self.assertIn(\"brave brave sword\", hero.inventory, \"Item should be in inventory\")\n        self.assertEqual(len(hero.inventory), 1, \"Inventory should have one item\")",
      "hints": ["Use the append method to add the item to self.inventory"]
    },
    {
      "title": "Supply the Party",
      "description": "Your party needs supplies for their journey! Create a function that takes a list of adventurers and a list of items, then distributes the items evenly among the adventurers.",
      "success_message": "Your party is well-equipped for the adventure ahead!",
      "initial_code": "# The Adventurer class is provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n\ndef distribute_supplies(party: list, supplies: list) -> None:\n    # Distribute the supplies as evenly as possible among the party members\n    # If there are leftover items, give them to the lowest level adventurers first\n    # Your code here\n    pass",
      "test_code": "class TestSupplyDistribution(unittest.TestCase):\n    def test_equal_distribution(self):\n        party = [\n            Adventurer(\"Knight\", 3),\n            Adventurer(\"Archer\", 2),\n            Adventurer(\"Mage\", 1)\n        ]\n        supplies = [\"sword\", \"bow\", \"staff\", \"health potion\", \"mana potion\", \"shield\"]\n        distribute_supplies(party, supplies)\n        # Each should have 2 items\n        self.assertEqual(len(party[0].inventory), 2, \"Each party member should have 2 items\")\n        self.assertEqual(len(party[1].inventory), 2, \"Each party member should have 2 items\")\n        self.assertEqual(len(party[2].inventory), 2, \"Each party member should have 2 items\")\n        # All items should be distributed\n        all_items = party[0].inventory + party[1].inventory + party[2].inventory\n        for item in supplies:\n            self.assertIn(item, all_items, f\"{item} should be distributed\")\n\n    def test_uneven_distribution(self):\n        party = [\n            Adventurer(\"Knight\", 3),\n            Adventurer(\"Archer\", 2),\n            Adventurer(\"Mage\", 1)\n        ]\n        supplies = [\"sword\", \"bow\", \"staff\", \"health potion\", \"mana potion\", \"shield\", \"torch\"]\n        distribute_supplies(party, supplies)\n        # Lower level should get the extra item\n        self.assertEqual(len(party[0].inventory), 2, \"Knight should have 2 items\")\n        self.assertEqual(len(party[1].inventory), 2, \"Archer should have 2 items\")\n        self.assertEqual(len(party[2].inventory), 3, \"Mage should have 3 items with the extra\")",
      "hints": ["First calculate how many items each person should get (supplies รท party size)", "Then determine how many leftover items there are", "Sort the party by level (ascending) to give extras to lowest level first", "Use a loop to distribute the items by calling add_item() on each adventurer"]
    },
    {
      "title": "What's in the Bag?",
      "description": "Add a has_item method that returns True if an item is in the inventory, False otherwise.",
      "success_message": "Excellent! Your adventurer can now check their inventory!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        # Your code here\n        pass",
      "test_code": "class TestHasItem(unittest.TestCase):\n    def test_item_check(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        hero.add_item(\"brave brave sword\")\n        self.assertTrue(hero.has_item(\"brave brave sword\"), \"Should find existing item\")\n        self.assertFalse(hero.has_item(\"running shoes\"), \"Should not find nonexistent item\")",
      "hints": ["Use the 'in' operator to check if the item is in self.inventory"]
    },
    {
      "title": "Find the Potion",
      "description": "The party desperately needs a healing potion! Create a function that checks each adventurer's inventory and returns the name of the first adventurer who has a 'healing potion', or None if nobody has one.",
      "success_message": "Great! Now you can find who has the important items your party needs!",
      "initial_code": "# The Adventurer class is provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n\ndef find_potion_holder(party: list) -> str:\n    # Check each adventurer in the party to see who has a 'healing potion'\n    # Return the name of the first adventurer who has one, or None if nobody has one\n    # Your code here\n    pass",
      "test_code": "class TestFindPotionHolder(unittest.TestCase):\n    def test_find_potion(self):\n        party = [\n            Adventurer(\"Knight\", 3),\n            Adventurer(\"Archer\", 2),\n            Adventurer(\"Mage\", 1)\n        ]\n        party[0].add_item(\"sword\")\n        party[1].add_item(\"bow\")\n        party[1].add_item(\"healing potion\")\n        party[2].add_item(\"staff\")\n        \n        self.assertEqual(find_potion_holder(party), \"Archer\", \"Should find the adventurer with the potion\")\n        \n    def test_no_potion(self):\n        party = [\n            Adventurer(\"Knight\", 3),\n            Adventurer(\"Archer\", 2),\n            Adventurer(\"Mage\", 1)\n        ]\n        party[0].add_item(\"sword\")\n        party[1].add_item(\"bow\")\n        party[2].add_item(\"staff\")\n        \n        self.assertIsNone(find_potion_holder(party), \"Should return None when no one has a potion\")",
      "hints": ["Loop through each adventurer in the party", "Use the has_item method to check for the healing potion", "Return the name of the first adventurer who has one", "If nobody has one, return None"]
    },
    {
      "title": "Level Up!",
      "description": "Add a level_up method that increases the adventurer's level by 1 and returns 'Huzzah! Level {new_level}!'",
      "success_message": "Outstanding! Your adventurer grows stronger!",
      "initial_code": "class Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def level_up(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestLevelUp(unittest.TestCase):\n    def test_leveling(self):\n        hero = Adventurer(\"Sir Robin\", 1)\n        message = hero.level_up()\n        self.assertEqual(hero.level, 2, \"Level should increase by 1\")\n        self.assertEqual(message, \"Huzzah! Level 2!\", \"Should show celebration message\")",
      "hints": ["Increment self.level and return a message using an f-string"]
    },
    {
      "title": "Victory Celebration",
      "description": "After defeating a mighty dragon, the entire party levels up! Create a function that levels up all adventurers in the party and returns a summary of their new levels.",
      "success_message": "Hurrah! Your party has grown stronger after their victory!",
      "initial_code": "# The Adventurer class is provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\ndef victory_celebration(party: list) -> str:\n    # Level up each adventurer in the party\n    # Return a string that says: \"The party has leveled up! Current levels: {name1}: {level1}, {name2}: {level2}, ...\"\n    # Your code here\n    pass",
      "test_code": "class TestVictoryCelebration(unittest.TestCase):\n    def test_party_level_up(self):\n        party = [\n            Adventurer(\"Knight\", 3),\n            Adventurer(\"Archer\", 2),\n            Adventurer(\"Mage\", 1)\n        ]\n        result = victory_celebration(party)\n        # Check that everyone leveled up\n        self.assertEqual(party[0].level, 4, \"Knight should level up to 4\")\n        self.assertEqual(party[1].level, 3, \"Archer should level up to 3\")\n        self.assertEqual(party[2].level, 2, \"Mage should level up to 2\")\n        # Check the output message\n        self.assertIn(\"The party has leveled up!\", result, \"Message should mention party level up\")\n        self.assertIn(\"Knight: 4\", result, \"Message should show Knight's new level\")\n        self.assertIn(\"Archer: 3\", result, \"Message should show Archer's new level\")\n        self.assertIn(\"Mage: 2\", result, \"Message should show Mage's new level\")",
      "hints": ["Call level_up() on each adventurer in the party", "Create a summary string with all their names and new levels", "Use an f-string to format the final message"]
    },
    {
      "title": "The Mighty Warrior",
      "description": "Create a Warrior class that inherits from Adventurer and starts with a 'rusty sword' in their inventory.",
      "success_message": "Outstanding! Your Warrior class is ready for battle!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# Create your Warrior class below\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        # Your code here\n        pass",
      "test_code": "class TestWarrior(unittest.TestCase):\n    def test_warrior_creation(self):\n        warrior = Warrior(\"She-Ra\", 1)\n        self.assertEqual(warrior.name, \"She-Ra\", \"Warrior should have a name\")\n        self.assertEqual(warrior.level, 1, \"Warrior should have a level\")\n        self.assertIn(\"rusty sword\", warrior.inventory, \"Warrior should start with a rusty sword\")",
      "hints": ["Call the parent class's __init__ using super(), then add the sword to inventory"]
    },
    {
      "title": "Battle Cry",
      "description": "Give Warriors a battle_cry method that returns: 'For the honor of {name}!'",
      "success_message": "By the power of Grayskull! Your warrior has found their voice!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# The Warrior class with __init__ is provided - DO NOT MODIFY\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"rusty sword\")\n    \n    def battle_cry(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestBattleCry(unittest.TestCase):\n    def test_warrior_cry(self):\n        warrior = Warrior(\"She-Ra\", 1)\n        self.assertEqual(warrior.battle_cry(), \"For the honor of She-Ra!\", \"Battle cry should use warrior's name\")",
      "hints": ["Use an f-string with self.name to create the battle cry"]
    },
    {
      "title": "Battle Formation",
      "description": "Your party is facing a fearsome dragon! Create a function that takes a party of adventurers and returns a string with each warrior's battle cry and each adventurer's greeting.",
      "success_message": "Your party is ready for battle against the mighty dragon!",
      "initial_code": "# The necessary classes are provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"rusty sword\")\n    \n    def battle_cry(self) -> str:\n        return f\"For the honor of {self.name}!\"\n\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"gnarled staff\")\n        self.inventory.append(\"mysterious potion\")\n\ndef battle_formation(party: list) -> str:\n    # For each warrior in the party, add their battle cry\n    # For each non-warrior, add their greeting\n    # Join all messages with a newline character and return\n    # Your code here\n    pass",
      "test_code": "class TestBattleFormation(unittest.TestCase):\n    def test_formation(self):\n        party = [\n            Warrior(\"She-Ra\", 5),\n            Adventurer(\"Bow\", 4),\n            Wizard(\"Glimmer\", 4),\n            Warrior(\"Adora\", 6)\n        ]\n        formation = battle_formation(party)\n        \n        # Check for warrior battle cries\n        self.assertIn(\"For the honor of She-Ra!\", formation, \"Formation should include She-Ra's battle cry\")\n        self.assertIn(\"For the honor of Adora!\", formation, \"Formation should include Adora's battle cry\")\n        \n        # Check for non-warrior greetings\n        self.assertIn(\"I am Bow, a level 4 adventurer!\", formation, \"Formation should include Bow's greeting\")\n        self.assertIn(\"I am Glimmer, a level 4 adventurer!\", formation, \"Formation should include Glimmer's greeting\")\n        \n        # Count the number of lines\n        lines = formation.strip().split('\\n')\n        self.assertEqual(len(lines), 4, \"Formation should have 4 lines, one for each party member\")",
      "hints": ["Check if each party member is an instance of Warrior using isinstance(member, Warrior)", "If they are a Warrior, call battle_cry()", "Otherwise, call greet()", "Collect all messages in a list", "Join the list with '\\n' to create the formation string"]
    },
    {
      "title": "The Wise Wizard",
      "description": "Create a Wizard class that inherits from Adventurer and starts with a 'gnarled staff' and 'mysterious potion'.",
      "success_message": "Magnificent! Your Wizard class is ready to cast some spells!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# Create your Wizard class below\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        # Your code here\n        pass",
      "test_code": "class TestWizard(unittest.TestCase):\n    def test_wizard_creation(self):\n        wizard = Wizard(\"Tim the Enchanter\", 1)\n        self.assertIn(\"gnarled staff\", wizard.inventory, \"Wizard should have a staff\")\n        self.assertIn(\"mysterious potion\", wizard.inventory, \"Wizard should have a potion\")\n        self.assertEqual(len(wizard.inventory), 2, \"Wizard should start with exactly 2 items\")",
      "hints": ["Call super().__init__, then append both items to the inventory"]
    },
    {
      "title": "Inventory Count",
      "description": "Create a function that counts how many total items your party has in their inventory, grouped by item type, and returns a dictionary.",
      "success_message": "Excellent! Now you can track all the items in your party's possession!",
      "initial_code": "# The necessary classes are provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"rusty sword\")\n\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"gnarled staff\")\n        self.inventory.append(\"mysterious potion\")\n\ndef inventory_count(party: list) -> dict:\n    # Count all items in the party's combined inventory\n    # Return a dictionary with items as keys and counts as values\n    # Example: {'rusty sword': 2, 'gnarled staff': 1, 'mysterious potion': 1}\n    # Your code here\n    pass",
      "test_code": "class TestInventoryCount(unittest.TestCase):\n    def test_count(self):\n        party = [\n            Warrior(\"Knight\", 3),\n            Wizard(\"Mage\", 2),\n            Adventurer(\"Rogue\", 2)\n        ]\n        # Add some extra items\n        party[0].add_item(\"health potion\")\n        party[1].add_item(\"health potion\")\n        party[2].add_item(\"rusty sword\")  # Duplicate item\n        \n        counts = inventory_count(party)\n        \n        self.assertEqual(counts[\"rusty sword\"], 2, \"Should count 2 rusty swords\")\n        self.assertEqual(counts[\"gnarled staff\"], 1, \"Should count 1 gnarled staff\")\n        self.assertEqual(counts[\"mysterious potion\"], 1, \"Should count 1 mysterious potion\")\n        self.assertEqual(counts[\"health potion\"], 2, \"Should count 2 health potions\")\n        self.assertEqual(len(counts), 4, \"Should have exactly 4 different item types\")",
      "hints": ["Initialize an empty dictionary to store the counts", "Loop through each party member and then through each item in their inventory", "For each item, increment the count in the dictionary or initialize it to 1 if it's not there yet"]
    },
    {
      "title": "Magic Words",
      "description": "Give Wizards a cast_spell method that returns: '*waves staff* Alakazam, {name} casts magic missile!'",
      "success_message": "YOU SHALL PASS! Your wizard can now cast spells!",
      "initial_code": "# The Adventurer class is provided for you - DO NOT MODIFY\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\n# The Wizard class with __init__ is provided - DO NOT MODIFY\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"gnarled staff\")\n        self.inventory.append(\"mysterious potion\")\n    \n    def cast_spell(self) -> str:\n        # Your code here\n        pass",
      "test_code": "class TestSpellCasting(unittest.TestCase):\n    def test_wizard_spell(self):\n        wizard = Wizard(\"Tim the Enchanter\", 1)\n        expected = \"*waves staff* Alakazam, Tim the Enchanter casts magic missile!\"\n        self.assertEqual(wizard.cast_spell(), expected, \"Spell message should include wizard's name\")",
      "hints": ["Use an f-string to create the spell message with self.name"]
    },
    {
      "title": "Battle Simulation",
      "description": "Create a function that simulates a battle between your party and a dragon! Each warrior and wizard should use their special abilities, and the party should level up if they win.",
      "success_message": "Epic victory! Your party has defeated the dragon and grown stronger!",
      "initial_code": "# All necessary classes are provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"rusty sword\")\n    \n    def battle_cry(self) -> str:\n        return f\"For the honor of {self.name}!\"\n\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"gnarled staff\")\n        self.inventory.append(\"mysterious potion\")\n    \n    def cast_spell(self) -> str:\n        return f\"*waves staff* Alakazam, {self.name} casts magic missile!\"\n\ndef simulate_dragon_battle(party: list) -> str:\n    # Simulate a battle with a dragon\n    # 1. For each warrior in the party, call battle_cry()\n    # 2. For each wizard in the party, call cast_spell()\n    # 3. If the combined level of the party is at least 10, they win\n    # 4. If they win, level up all party members and add 'dragon scale' to one member's inventory\n    # 5. Return a summary string that includes battle actions and the outcome\n    # Your code here\n    pass",
      "test_code": "class TestDragonBattle(unittest.TestCase):\n    def test_winning_battle(self):\n        party = [\n            Warrior(\"Knight\", 4),\n            Wizard(\"Mage\", 3),\n            Adventurer(\"Rogue\", 4)\n        ]\n        result = simulate_dragon_battle(party)\n        \n        # Check that actions were performed\n        self.assertIn(\"For the honor of Knight!\", result, \"Knight should use battle cry\")\n        self.assertIn(\"Mage casts magic missile\", result, \"Mage should cast a spell\")\n        \n        # Check that the party won and leveled up\n        self.assertIn(\"victory\", result.lower(), \"Party should be victorious\")\n        self.assertEqual(party[0].level, 5, \"Knight should level up to 5\")\n        self.assertEqual(party[1].level, 4, \"Mage should level up to 4\")\n        self.assertEqual(party[2].level, 5, \"Rogue should level up to 5\")\n        \n        # Check that a dragon scale was added to someone's inventory\n        all_items = []\n        for member in party:\n            all_items.extend(member.inventory)\n        self.assertIn(\"dragon scale\", all_items, \"Someone should get a dragon scale\")\n    \n    def test_losing_battle(self):\n        party = [\n            Warrior(\"Knight\", 2),\n            Wizard(\"Mage\", 2),\n            Adventurer(\"Rogue\", 2)\n        ]\n        result = simulate_dragon_battle(party)\n        \n        # Check that the party lost\n        self.assertIn(\"defeat\", result.lower(), \"Party should be defeated\")\n        \n        # Check that levels didn't change\n        self.assertEqual(party[0].level, 2, \"Knight's level should not change\")\n        self.assertEqual(party[1].level, 2, \"Mage's level should not change\")\n        self.assertEqual(party[2].level, 2, \"Rogue's level should not change\")\n        \n        # Check that no dragon scale was added\n        all_items = []\n        for member in party:\n            all_items.extend(member.inventory)\n        self.assertNotIn(\"dragon scale\", all_items, \"Nobody should get a dragon scale after losing\")",
      "hints": ["Start by creating a string to collect all the battle actions", "Use isinstance() to check each party member's class", "Calculate the total party level to determine if they win", "If they win, loop through the party to level everyone up", "Add the dragon scale to one member's inventory", "Return a descriptive summary of the battle"]
    },
    {
      "title": "Adventure Journal",
      "description": "Create a function that generates an adventure journal entry for your party, summarizing their current state and inventory.",
      "success_message": "Brilliant! Your adventure is now documented for posterity!",
      "initial_code": "# All necessary classes are provided for you\nclass Adventurer:\n    def __init__(self, name: str, level: int):\n        self.name = name\n        self.level = level\n        self.inventory = []\n    \n    def greet(self) -> str:\n        return f\"I am {self.name}, a level {self.level} adventurer!\"\n    \n    def add_item(self, item: str):\n        self.inventory.append(item)\n        \n    def has_item(self, item: str) -> bool:\n        return item in self.inventory\n    \n    def level_up(self) -> str:\n        self.level += 1\n        return f\"Huzzah! Level {self.level}!\"\n\nclass Warrior(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"rusty sword\")\n    \n    def battle_cry(self) -> str:\n        return f\"For the honor of {self.name}!\"\n\nclass Wizard(Adventurer):\n    def __init__(self, name: str, level: int):\n        super().__init__(name, level)\n        self.inventory.append(\"gnarled staff\")\n        self.inventory.append(\"mysterious potion\")\n    \n    def cast_spell(self) -> str:\n        return f\"*waves staff* Alakazam, {self.name} casts magic missile!\"\n\ndef create_journal_entry(party: list, day: int, location: str) -> str:\n    # Create a journal entry for the current state of the party\n    # The entry should include:\n    # - The day number and location\n    # - The number of party members and their total combined level\n    # - A list of each member with their name, class, level, and number of items\n    # - A count of the total number of items the party is carrying\n    # Your code here\n    pass",
      "test_code": "class TestJournalEntry(unittest.TestCase):\n    def test_journal(self):\n        party = [\n            Warrior(\"Knight\", 5),\n            Wizard(\"Mage\", 4),\n            Adventurer(\"Rogue\", 3)\n        ]\n        # Add some extra items\n        party[0].add_item(\"shield\")\n        party[1].add_item(\"spellbook\")\n        party[2].add_item(\"lockpicks\")\n        party[2].add_item(\"cloak of shadows\")\n        \n        entry = create_journal_entry(party, 7, \"The Dark Forest\")\n        \n        # Check that all required elements are present\n        self.assertIn(\"Day 7\", entry, \"Entry should include the day number\")\n        self.assertIn(\"The Dark Forest\", entry, \"Entry should include the location\")\n        self.assertIn(\"3 adventurers\", entry, \"Entry should mention the party size\")\n        self.assertIn(\"combined level of 12\", entry, \"Entry should mention the total level\")\n        \n        # Check that all party members are mentioned\n        self.assertIn(\"Knight\", entry, \"Entry should mention Knight\")\n        self.assertIn(\"Warrior\", entry, \"Entry should mention Knight's class\")\n        self.assertIn(\"Mage\", entry, \"Entry should mention Mage\")\n        self.assertIn(\"Wizard\", entry, \"Entry should mention Mage's class\")\n        self.assertIn(\"Rogue\", entry, \"Entry should mention Rogue\")\n        \n        # Check for inventory counts\n        self.assertIn(\"9 items\", entry, \"Entry should mention the total item count\")",
      "hints": ["Create a string that builds the journal entry section by section", "Calculate the total party level with a loop", "For each member, check their type to determine their class", "Count the total items across all inventories", "Format everything into a nice, readable journal entry"]
    }
  ]
}
