[
  {
    "question": "What are the main benefits of using database indexes?",
    "correct": [
      "Faster data retrieval",
      "Improved query performance",
      "Reduced disk I/O operations"
    ],
    "incorrect": [
      "Reduced storage space requirements",
      "Automatic data backup",
      "Improved data security"
    ],
    "hint": "Think about how indexes help with finding information quickly, like using a book's index."
  },
  {
    "question": "Which statements about B-trees are true?",
    "correct": [
      "They are self-balancing",
      "They are commonly used in database indexes",
      "They allow efficient insertion and deletion"
    ],
    "incorrect": [
      "They can only store numbers",
      "They must be rebuilt daily",
      "They can only have two child nodes"
    ],
    "hint": "Consider the key features that make B-trees useful for organizing data in databases."
  },
  {
    "question": "What properties are part of ACID transactions?",
    "correct": [
      "Atomicity",
      "Consistency",
      "Isolation",
      "Durability"
    ],
    "incorrect": [
      "Availability",
      "Scalability",
      "Performance"
    ],
    "hint": "Remember the four key properties that ensure reliable database transactions."
  },
  {
    "question": "What does Atomicity in ACID mean?",
    "correct": [
      "All parts of a transaction must succeed or none of them do",
      "Transactions are all-or-nothing operations"
    ],
    "incorrect": [
      "Transactions must be very small",
      "Transactions must be fast",
      "Transactions can be partially completed"
    ],
    "hint": "Think about the word 'atomic' meaning indivisible or whole."
  },
  {
    "question": "What are valid uses of database indexes?",
    "correct": [
      "Speeding up WHERE clause searches",
      "Enforcing unique constraints",
      "Optimizing ORDER BY operations"
    ],
    "incorrect": [
      "Backing up data automatically",
      "Compressing data storage",
      "Encrypting sensitive data"
    ],
    "hint": "Consider how indexes help with finding and organizing data."
  },
  {
    "question": "What are characteristics of B-tree indexes?",
    "correct": [
      "They maintain sorted data",
      "They allow for range queries",
      "They automatically stay balanced"
    ],
    "incorrect": [
      "They require manual sorting",
      "They can only store unique values",
      "They must be rebuilt after every insert"
    ],
    "hint": "Think about what makes B-trees efficient for database operations."
  },
  {
    "question": "What ensures Consistency in a database?",
    "correct": [
      "Data validation rules",
      "Foreign key constraints",
      "Transaction rollbacks when rules are violated"
    ],
    "incorrect": [
      "Regular data backups",
      "Fast query performance",
      "Multiple data copies"
    ],
    "hint": "Consider what keeps data accurate and following all defined rules."
  },
  {
    "question": "What does Isolation in ACID prevent?",
    "correct": [
      "Interference between concurrent transactions",
      "Reading of uncommitted data"
    ],
    "incorrect": [
      "Database crashes",
      "Network failures",
      "Hardware problems"
    ],
    "hint": "Think about how multiple users can work with the database at the same time."
  },
  {
    "question": "What ensures Durability in a database?",
    "correct": [
      "Writing to permanent storage",
      "Transaction logs",
      "Backup systems"
    ],
    "incorrect": [
      "Fast memory caches",
      "Network speed",
      "CPU performance"
    ],
    "hint": "Consider what happens to your data after a power failure."
  },
  {
    "question": "When should you consider adding an index?",
    "correct": [
      "On frequently searched columns",
      "On columns used in WHERE clauses",
      "On columns used for sorting"
    ],
    "incorrect": [
      "On every column automatically",
      "Only on primary keys",
      "On rarely used columns"
    ],
    "hint": "Think about which columns are used most often in your queries."
  },
  {
    "question": "What can slow down database operations?",
    "correct": [
      "Too many indexes",
      "Unnecessary data retrieval",
      "Poor query optimization"
    ],
    "incorrect": [
      "Having primary keys",
      "Using transactions",
      "Having foreign keys"
    ],
    "hint": "Consider what might cause extra work for the database."
  },
  {
    "question": "What are valid reasons to use transactions?",
    "correct": [
      "Maintaining data integrity",
      "Handling multiple related operations",
      "Preventing partial updates"
    ],
    "incorrect": [
      "Speeding up queries",
      "Reducing storage space",
      "Improving network speed"
    ],
    "hint": "Think about when you need to ensure data consistency."
  },
  {
    "question": "Which operations typically benefit from indexes?",
    "correct": [
      "Searching for specific records",
      "Sorting data",
      "Enforcing uniqueness"
    ],
    "incorrect": [
      "Inserting new records",
      "Deleting records",
      "Updating many records"
    ],
    "hint": "Consider which operations need to find data quickly."
  },
  {
    "question": "What happens during a transaction rollback?",
    "correct": [
      "All changes are undone",
      "Database returns to previous consistent state"
    ],
    "incorrect": [
      "Data is permanently deleted",
      "Indexes are rebuilt",
      "Database goes offline"
    ],
    "hint": "Think about what happens when a transaction fails."
  },
  {
    "question": "What are characteristics of good database design?",
    "correct": [
      "Appropriate use of indexes",
      "Proper normalization",
      "Clear relationships between tables"
    ],
    "incorrect": [
      "Maximum number of indexes",
      "Storing all data in one table",
      "Avoiding foreign keys"
    ],
    "hint": "Consider what makes a database efficient and maintainable."
  },
  {
    "question": "What is the primary purpose of an index in a database?",
    "correct": [
      "To speed up data retrieval operations",
      "To allow quick access to records based on key values"
    ],
    "incorrect": [
      "To enforce data integrity constraints",
      "To secure data from unauthorized access",
      "To backup the database"
    ],
    "hint": "Think about how indexes help improve query performance."
  },
  {
    "question": "Which data structure is commonly used to implement database indexes?",
    "correct": [
      "B-tree",
      "B+ tree"
    ],
    "incorrect": [
      "Linked list",
      "Hash table",
      "Binary heap"
    ],
    "hint": "Consider balanced tree structures that allow efficient insertion, deletion, and search operations."
  },
  {
    "question": "Which of the following are properties that define ACID in database transactions?",
    "correct": [
      "Atomicity",
      "Consistency",
      "Isolation",
      "Durability"
    ],
    "incorrect": [
      "Accessibility",
      "Complexity",
      "Integrity",
      "Dependability"
    ],
    "hint": "Remember the four key properties that ensure reliable database transactions."
  },
  {
    "question": "What is a B-tree used for in databases?",
    "correct": [
      "Organizing data for efficient retrieval",
      "Structuring indexes to allow fast searching",
      "Balancing tree nodes to maintain performance"
    ],
    "incorrect": [
      "Encrypting data for security",
      "Managing user access permissions",
      "Performing complex calculations"
    ],
    "hint": "Think about data structures that optimize search operations."
  },
  {
    "question": "Which of the following statements about database transactions are true?",
    "correct": [
      "A transaction is a sequence of operations performed as a single logical unit of work",
      "Transactions must be completed entirely or not at all",
      "Transactions ensure data integrity in the presence of concurrent access"
    ],
    "incorrect": [
      "Transactions are used to backup the database",
      "Transactions are optional in relational databases",
      "Transactions always improve database performance"
    ],
    "hint": "Consider how transactions ensure data consistency and integrity."
  },
  {
    "question": "Which of the following are phenomena that can occur when the 'Isolation' property is not properly enforced in a database?",
    "correct": [
      "Dirty reads",
      "Non-repeatable reads",
      "Phantom reads"
    ],
    "incorrect": [
      "Consistent reads",
      "Atomic writes",
      "Secure transactions"
    ],
    "hint": "Think about problems that arise from concurrent transaction interference."
  },
  {
    "question": "Which of the following best describe the 'Atomicity' property in ACID?",
    "correct": [
      "Transactions are all-or-nothing",
      "If any part of a transaction fails, the entire transaction fails",
      "Partial transactions are not allowed to occur"
    ],
    "incorrect": [
      "Transactions can be partially committed",
      "Transactions ensure high performance",
      "Transactions are visible to other users immediately"
    ],
    "hint": "Consider how atomicity ensures that transactions are indivisible units of work."
  },
  {
    "question": "What are some advantages of using indexes in databases?",
    "correct": [
      "Faster query execution",
      "Improved data retrieval performance",
      "Efficient sorting of data"
    ],
    "incorrect": [
      "Reduced storage requirements",
      "Enhanced data security",
      "Simplified database design"
    ],
    "hint": "Think about how indexes affect the speed of data access."
  },
  {
    "question": "Which of the following are true about B-trees used in databases?",
    "correct": [
      "They are balanced tree data structures",
      "They maintain sorted data for efficient retrieval",
      "They allow insertions and deletions that keep the tree balanced"
    ],
    "incorrect": [
      "They are used for unstructured data storage",
      "They are a type of linked list",
      "They store data in a heap format"
    ],
    "hint": "Consider how B-trees help in maintaining order and balance for efficient searches."
  },
  {
    "question": "What is the role of the 'Durability' property in ACID transactions?",
    "correct": [
      "Ensuring that once a transaction is committed, it remains so even in the event of a system failure",
      "Protecting committed transactions against loss due to power failures or crashes"
    ],
    "incorrect": [
      "Rolling back transactions upon failure",
      "Allowing transactions to be reversed after commitment",
      "Making transactions faster"
    ],
    "hint": "Think about how durability ensures permanence of committed data."
  },
  {
    "question": "Which of the following are benefits of using transactions in databases?",
    "correct": [
      "Maintaining data integrity",
      "Providing mechanisms for error recovery",
      "Enabling concurrent access without compromising consistency"
    ],
    "incorrect": [
      "Increasing database storage space",
      "Improving network security",
      "Automating database backups"
    ],
    "hint": "Consider how transactions help in keeping the database reliable and consistent."
  },
  {
    "question": "What problems can arise if 'Consistency' in ACID is not maintained?",
    "correct": [
      "Data may become corrupt",
      "Integrity constraints may be violated",
      "Database may enter an invalid state"
    ],
    "incorrect": [
      "Transactions will run faster",
      "Data will be more secure",
      "Indexes will be created automatically"
    ],
    "hint": "Think about how consistency ensures that data adheres to defined rules."
  },
  {
    "question": "Which of the following statements are true about database indexes?",
    "correct": [
      "Indexes can speed up query execution",
      "Indexes can slow down data modification operations",
      "Indexes require additional storage space"
    ],
    "incorrect": [
      "Indexes are always automatically created by the database",
      "Indexes eliminate the need for primary keys",
      "Indexes are used to enforce foreign key constraints"
    ],
    "hint": "Consider both the benefits and overheads of using indexes."
  },
  {
    "question": "Which of the following are characteristics of a B+ tree in databases?",
    "correct": [
      "Leaf nodes store actual data records",
      "All leaf nodes are at the same level",
      "Internal nodes store keys for navigation"
    ],
    "incorrect": [
      "Data is stored only in internal nodes",
      "It is unbalanced to optimize certain operations",
      "It does not support range queries"
    ],
    "hint": "Think about how B+ trees organize data differently from B-trees."
  },
  {
    "question": "Which of the following scenarios would benefit from the use of transactions in a database?",
    "correct": [
      "Updating multiple related records as a single unit",
      "Ensuring that a series of operations either all occur or none do",
      "Preventing data corruption when multiple users access the database concurrently"
    ],
    "incorrect": [
      "Speeding up read-only queries",
      "Performing simple single-row insertions",
      "Generating reports from static data"
    ],
    "hint": "Consider operations that need to be atomic and consistent."
  },
  {
    "question": "Which commands start a transaction in standard SQL?",
    "correct": [
      "BEGIN TRANSACTION",
      "START TRANSACTION",
      "BEGIN"
    ],
    "incorrect": [
      "OPEN TRANSACTION",
      "CREATE TRANSACTION",
      "INIT TRANSACTION"
    ],
    "hint": "Think about the most common ways to tell the database you want to group commands together."
  },
  {
    "question": "How do you safely update a student's grade as part of a transaction?",
    "correct": [
      "BEGIN TRANSACTION;\nUPDATE grades SET score = 95 WHERE student_id = 1;\nCOMMIT;",
      "START TRANSACTION;\nUPDATE grades SET score = 95 WHERE student_id = 1;\nCOMMIT;"
    ],
    "incorrect": [
      "BEGIN;\nUPDATE grades SET score = 95 WHERE student_id = 1;\nEND;",
      "START;\nUPDATE grades SET score = 95 WHERE student_id = 1;\nFINISH;",
      "TRANSACTION;\nUPDATE grades SET score = 95 WHERE student_id = 1;\nEND;"
    ],
    "hint": "Remember the three steps: start the transaction, make the change, save it."
  },
  {
    "question": "How do you create an index to speed up searching for students by last name?",
    "correct": [
      "CREATE INDEX idx_lastname ON students(last_name)",
      "CREATE INDEX student_lastname_idx ON students(last_name)"
    ],
    "incorrect": [
      "MAKE INDEX ON students(last_name)",
      "ADD INDEX last_name TO students",
      "CREATE FAST SEARCH ON students(last_name)"
    ],
    "hint": "Think about the command that helps the database find names quickly."
  },
  {
    "question": "If you're making multiple related grade changes, which commands ensure they all happen together?",
    "correct": [
      "BEGIN TRANSACTION;\nUPDATE grades SET final_grade = 'A' WHERE exam_score >= 90;\nUPDATE student_status SET honor_roll = TRUE WHERE id IN (SELECT student_id FROM grades WHERE final_grade = 'A');\nCOMMIT;",
      "START TRANSACTION;\nUPDATE grades SET final_grade = 'A' WHERE exam_score >= 90;\nUPDATE student_status SET honor_roll = TRUE WHERE id IN (SELECT student_id FROM grades WHERE final_grade = 'A');\nCOMMIT;"
    ],
    "incorrect": [
      "UPDATE grades SET final_grade = 'A' WHERE exam_score >= 90;\nUPDATE student_status SET honor_roll = TRUE WHERE id IN (SELECT student_id FROM grades WHERE final_grade = 'A');",
      "BATCH UPDATE grades SET final_grade = 'A' AND student_status SET honor_roll = TRUE;",
      "GROUP UPDATE grades AND student_status WHERE exam_score >= 90;"
    ],
    "hint": "Remember to wrap related changes in transaction commands to keep them together."
  },
  {
    "question": "How do you undo changes if something goes wrong in a transaction?",
    "correct": [
      "ROLLBACK",
      "ROLLBACK TRANSACTION"
    ],
    "incorrect": [
      "UNDO",
      "CANCEL",
      "REVERT TRANSACTION"
    ],
    "hint": "Think about the command that cancels all changes in a transaction."
  },
  {
    "question": "Which commands would help search grades faster by creating indexes?",
    "correct": [
      "CREATE INDEX idx_grade ON grades(grade_value, student_id)",
      "CREATE INDEX idx_student_grade ON grades(student_id, grade_value)"
    ],
    "incorrect": [
      "SPEED UP SEARCH ON grades(grade_value)",
      "ADD FAST LOOKUP TO grades(student_id)",
      "CREATE QUICK SEARCH ON grades(grade_value)"
    ],
    "hint": "Consider how to make searching through grades more efficient."
  },
  {
    "question": "When transferring a student between classes, which commands ensure both class changes happen together?",
    "correct": [
      "BEGIN TRANSACTION;\nDELETE FROM class_enrollment WHERE student_id = 1 AND class_id = 101;\nINSERT INTO class_enrollment (student_id, class_id) VALUES (1, 102);\nCOMMIT;",
      "START TRANSACTION;\nDELETE FROM class_enrollment WHERE student_id = 1 AND class_id = 101;\nINSERT INTO class_enrollment (student_id, class_id) VALUES (1, 102);\nCOMMIT;"
    ],
    "incorrect": [
      "UPDATE class_enrollment SET class_id = 102 WHERE student_id = 1 AND class_id = 101;",
      "TRANSFER student_id = 1 FROM class_id = 101 TO class_id = 102;",
      "MOVE STUDENT 1 FROM CLASS 101 TO 102;"
    ],
    "hint": "Think about keeping the removal from one class and addition to another class together."
  },
  {
    "question": "How do you make sure student names can be quickly searched regardless of case?",
    "correct": [
      "CREATE INDEX idx_name ON students(LOWER(name))",
      "CREATE INDEX idx_student_name ON students(UPPER(name))"
    ],
    "incorrect": [
      "CREATE INDEX name_search ON students(name = LOWER(name))",
      "ADD CASE INSENSITIVE INDEX ON students(name)",
      "CREATE QUICK SEARCH FOR students(name) IGNORE CASE"
    ],
    "hint": "Consider how to index names so searches work regardless of uppercase or lowercase."
  },
  {
    "question": "When updating both a student's grade and their GPA, which commands keep the data consistent?",
    "correct": [
      "BEGIN TRANSACTION;\nUPDATE grades SET grade = 95 WHERE student_id = 1;\nUPDATE students SET gpa = (SELECT AVG(grade) FROM grades WHERE student_id = 1) WHERE id = 1;\nCOMMIT;",
      "START TRANSACTION;\nUPDATE grades SET grade = 95 WHERE student_id = 1;\nUPDATE students SET gpa = (SELECT AVG(grade) FROM grades WHERE student_id = 1) WHERE id = 1;\nCOMMIT;"
    ],
    "incorrect": [
      "UPDATE grades AND students SET grade = 95, gpa = 95 WHERE student_id = 1;",
      "CHANGE grade AND gpa FOR student_id = 1;",
      "UPDATE ALL VALUES FOR student_id = 1;"
    ],
    "hint": "Remember to update both the grade and GPA together in one transaction."
  },
  {
    "question": "How do you quickly find all grades for a specific assignment?",
    "correct": [
      "CREATE INDEX idx_assignment ON grades(assignment_id)",
      "CREATE INDEX assignment_grades ON grades(assignment_id, grade)"
    ],
    "incorrect": [
      "MAKE FAST SEARCH ON grades(assignment_id)",
      "ADD QUICK LOOKUP assignment_id IN grades",
      "CREATE SEARCH FOR assignments IN grades"
    ],
    "hint": "Think about making assignment searches faster with an index."
  },
  {
    "question": "Which commands ensure a grade change and corresponding GPA update can be undone if there's an error?",
    "correct": [
      "BEGIN TRANSACTION;\nUPDATE grades SET grade = 85 WHERE id = 1;\nUPDATE student_stats SET gpa = (SELECT AVG(grade) FROM grades WHERE student_id = 1);\nIF (SELECT gpa FROM student_stats WHERE student_id = 1) < 0 THEN ROLLBACK; ELSE COMMIT; END IF;",
      "START TRANSACTION;\nUPDATE grades SET grade = 85 WHERE id = 1;\nUPDATE student_stats SET gpa = (SELECT AVG(grade) FROM grades WHERE student_id = 1);\nIF (SELECT gpa FROM student_stats WHERE student_id = 1) < 0 THEN ROLLBACK; ELSE COMMIT; END IF;"
    ],
    "incorrect": [
      "UPDATE grades AND student_stats WITH UNDO;",
      "CHANGE GRADES WITH BACKUP;",
      "SAFE UPDATE grades AND student_stats;"
    ],
    "hint": "Consider how to check for errors and undo changes if needed."
  },
  {
    "question": "How do you create an index to quickly find students by both last name and first name?",
    "correct": [
      "CREATE INDEX idx_full_name ON students(last_name, first_name)",
      "CREATE INDEX name_search ON students(last_name, first_name)"
    ],
    "incorrect": [
      "CREATE INDEX ON full_name",
      "ADD NAME SEARCH TO students",
      "CREATE FAST SEARCH FOR names"
    ],
    "hint": "Think about creating an index that helps with searching both parts of a name."
  },
  {
    "question": "When moving a student to a new grade level, which commands ensure all related records are updated together?",
    "correct": [
      "BEGIN TRANSACTION;\nUPDATE students SET grade_level = grade_level + 1 WHERE id = 1;\nUPDATE class_enrollment SET class_id = (SELECT id FROM classes WHERE grade_level = (SELECT grade_level FROM students WHERE id = 1)) WHERE student_id = 1;\nCOMMIT;",
      "START TRANSACTION;\nUPDATE students SET grade_level = grade_level + 1 WHERE id = 1;\nUPDATE class_enrollment SET class_id = (SELECT id FROM classes WHERE grade_level = (SELECT grade_level FROM students WHERE id = 1)) WHERE student_id = 1;\nCOMMIT;"
    ],
    "incorrect": [
      "UPDATE ALL student_records SET grade_level = grade_level + 1;",
      "PROMOTE STUDENT 1 TO NEXT GRADE;",
      "CHANGE GRADE LEVEL AND CLASSES FOR student_id = 1;"
    ],
    "hint": "Remember to update both the grade level and class assignments in one transaction."
  },
  {
    "question": "How do you create an index to quickly look up grades within specific date ranges?",
    "correct": [
      "CREATE INDEX idx_grade_date ON grades(date_received, grade)",
      "CREATE INDEX grade_by_date ON grades(date_received)"
    ],
    "incorrect": [
      "CREATE DATE SEARCH ON grades",
      "ADD QUICK DATE LOOKUP TO grades",
      "CREATE FAST DATE INDEX grades"
    ],
    "hint": "Think about making date-based grade searches faster."
  },
  {
    "question": "Which commands help prevent duplicate student ID numbers?",
    "correct": [
      "CREATE UNIQUE INDEX idx_student_id ON students(student_number)",
      "CREATE UNIQUE INDEX student_id_unique ON students(student_number)"
    ],
    "incorrect": [
      "MAKE STUDENT_ID UNIQUE",
      "ADD UNIQUE RULE TO student_number",
      "CREATE NO DUPLICATES ON student_number"
    ],
    "hint": "Consider how to use an index to ensure each student number is used only once."
  },
    {
    "question": "Which SQL command is used to create an index on a table column?",
    "correct": [
      "CREATE INDEX",
      "CREATE UNIQUE INDEX"
    ],
    "incorrect": [
      "CREATE TABLE",
      "ALTER TABLE ADD CONSTRAINT",
      "DROP INDEX"
    ],
    "hint": "Think about the SQL command that defines an index for faster query performance."
  },
  {
    "question": "Which of the following statements about SQL transactions are true?",
    "correct": [
      "Transactions in SQL begin with BEGIN TRANSACTION or START TRANSACTION",
      "Transactions can be committed with COMMIT",
      "Transactions can be rolled back with ROLLBACK"
    ],
    "incorrect": [
      "Transactions are started with INITIATE TRANSACTION",
      "Transactions cannot be rolled back in SQL",
      "Transactions automatically commit after each SQL statement"
    ],
    "hint": "Consider how transactions are managed in SQL using specific commands."
  },
  {
    "question": "Which SQL commands are used to control transaction properties related to ACID compliance?",
    "correct": [
      "SET TRANSACTION ISOLATION LEVEL",
      "COMMIT",
      "ROLLBACK"
    ],
    "incorrect": [
      "CREATE INDEX",
      "SELECT * FROM",
      "GRANT PERMISSION"
    ],
    "hint": "Think about commands that affect transaction behavior and isolation."
  },
  {
    "question": "In SQL, which of the following are valid isolation levels specified in the ANSI SQL standard?",
    "correct": [
      "READ UNCOMMITTED",
      "READ COMMITTED",
      "REPEATABLE READ",
      "SERIALIZABLE"
    ],
    "incorrect": [
      "WRITE COMMITTED",
      "ATOMIC",
      "NON-ISOLATED"
    ],
    "hint": "Consider the standard isolation levels defined in SQL."
  },
  {
    "question": "Which SQL clause can be used to ensure uniqueness and create an index on a column when creating a table?",
    "correct": [
      "CREATE TABLE with UNIQUE constraint",
      "CREATE TABLE with PRIMARY KEY constraint"
    ],
    "incorrect": [
      "CREATE TABLE with INDEX clause",
      "CREATE TABLE with FOREIGN KEY constraint",
      "CREATE TABLE with CHECK constraint"
    ],
    "hint": "Think about constraints that enforce uniqueness and can also create an index."
  },
  {
    "question": "Which of the following are true about B-trees and their implementation in SQL databases?",
    "correct": [
      "B-trees are commonly used to implement indexes in SQL databases",
      "B-tree indexes help improve query performance",
      "SQL databases use B-trees for sorted data retrieval"
    ],
    "incorrect": [
      "B-trees are used to enforce foreign key constraints",
      "B-trees are used for storing unstructured data in SQL",
      "B-trees are a type of user-defined function in SQL"
    ],
    "hint": "Think about data structures underlying SQL indexes."
  },
  {
    "question": "Which of the following SQL statements can be used to start a transaction?",
    "correct": [
      "BEGIN TRANSACTION",
      "START TRANSACTION"
    ],
    "incorrect": [
      "INITIATE TRANSACTION",
      "OPEN TRANSACTION",
      "CREATE TRANSACTION"
    ],
    "hint": "Think about the standard SQL commands to begin a transaction."
  },
  {
    "question": "When creating an index in SQL, which of the following statements are true?",
    "correct": [
      "Indexes can be created on one or more columns",
      "Creating an index can improve SELECT query performance",
      "The syntax is CREATE INDEX index_name ON table_name(column_name)"
    ],
    "incorrect": [
      "Indexes can only be created on primary key columns",
      "Indexes slow down SELECT queries",
      "Indexes are created with the command CREATE NEW INDEX"
    ],
    "hint": "Consider how and why indexes are created in SQL."
  },
  {
    "question": "Which of the following are commands that can be used to manage transactions in SQL?",
    "correct": [
      "COMMIT",
      "ROLLBACK",
      "SAVEPOINT"
    ],
    "incorrect": [
      "SAVE TRANSACTION",
      "ABORT",
      "END TRANSACTION"
    ],
    "hint": "Think about commands to finalize or undo transactions."
  },
  {
    "question": "Which SQL commands can be used to set the isolation level of a transaction?",
    "correct": [
      "SET TRANSACTION ISOLATION LEVEL SERIALIZABLE",
      "SET TRANSACTION ISOLATION LEVEL READ COMMITTED"
    ],
    "incorrect": [
      "ALTER TRANSACTION ISOLATION LEVEL",
      "SET SESSION ISOLATION LEVEL",
      "SET ISOLATION LEVEL HIGH"
    ],
    "hint": "Consider the standard way to specify transaction isolation levels."
  },
  {
    "question": "Which of the following statements about indexes in SQL are correct?",
    "correct": [
      "Indexes can be dropped using DROP INDEX command",
      "Indexes can be unique or non-unique",
      "Indexes are not visible in the data returned by SELECT queries"
    ],
    "incorrect": [
      "Indexes are required on all tables",
      "Indexes can only be created during table creation",
      "Indexes cannot be dropped once created"
    ],
    "hint": "Consider the properties and management of indexes in SQL."
  },
  {
    "question": "Which SQL commands are used to enforce data integrity and support ACID properties?",
    "correct": [
      "Constraints such as PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK",
      "Transaction control commands like BEGIN TRANSACTION, COMMIT, ROLLBACK"
    ],
    "incorrect": [
      "Data Definition Language commands like CREATE TABLE",
      "Data Control Language commands like GRANT, REVOKE",
      "SELECT queries"
    ],
    "hint": "Think about commands that ensure data integrity and transactional reliability."
  },
  {
    "question": "Which of the following SQL statements can be used to create a unique index?",
    "correct": [
      "CREATE UNIQUE INDEX index_name ON table_name(column_name)"
    ],
    "incorrect": [
      "CREATE NONUNIQUE INDEX index_name ON table_name(column_name)",
      "CREATE INDEX index_name ON table_name(column_name) WHERE UNIQUE = TRUE",
      "CREATE INDEX index_name ON table_name(column_name) UNIQUE"
    ],
    "hint": "Consider the correct syntax for creating a unique index."
  },
  {
    "question": "Which of the following are true about the COMMIT command in SQL?",
    "correct": [
      "It saves all changes made in the current transaction",
      "After a COMMIT, the changes become permanent",
      "It ends the current transaction"
    ],
    "incorrect": [
      "It undoes all changes made in the current transaction",
      "It only applies to SELECT statements",
      "It starts a new transaction"
    ],
    "hint": "Think about the role of COMMIT in transaction management."
  },
  {
    "question": "In SQL, how can you create a transaction that is isolated from other transactions?",
    "correct": [
      "By setting the isolation level to SERIALIZABLE",
      "By using SET TRANSACTION ISOLATION LEVEL command before starting the transaction"
    ],
    "incorrect": [
      "By using the command ISOLATE TRANSACTION",
      "By starting the transaction with BEGIN ISOLATED TRANSACTION",
      "Transactions are always isolated and do not require any settings"
    ],
    "hint": "Consider how isolation levels affect transaction behavior in SQL."
  }
]
