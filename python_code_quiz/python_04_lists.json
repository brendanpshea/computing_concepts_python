{
  "questions": [
    {
      "function_name": "find_book",
      "parameters": ["bookshelf", "title"],
      "description": "Write a function that checks if a specific book title is in a bookshelf list. Return True if the book is found, False otherwise. Use the 'in' operator.",
      "input_type": ["list", "str"],
      "answer_code": "def find_book(bookshelf, title):\n    return title in bookshelf",
      "hint": "The 'in' operator checks if an element exists in a list and returns a boolean.",
      "test_inputs": [[['Moby Dick', 'Pride and Prejudice', '1984'], '1984'], [['Harry Potter', 'Lord of the Rings'], 'Dune'], [[], 'The Great Gatsby'], [['To Kill a Mockingbird'], 'To Kill a Mockingbird']]
    },
    {
      "function_name": "first_mineral",
      "parameters": ["rock_collection"],
      "description": "Write a function that returns the alphabetically first mineral name from a rock collection list. If the list is empty, return an empty string.",
      "input_type": ["list"],
      "answer_code": "def first_mineral(rock_collection):\n    if not rock_collection:\n        return ''\n    return sorted(rock_collection)[0]",
      "hint": "Use the sorted() function to create a sorted copy of the list and then return the first element.",
      "test_inputs": [[['Quartz', 'Amethyst', 'Diamond', 'Ruby']], [['Granite', 'Basalt', 'Limestone']], [[]], [['Gold']]]
    },
    {
      "function_name": "search_element",
      "parameters": ["periodic_table", "element"],
      "description": "Write a function that finds the position (index) of a chemical element in a periodic table list. Return -1 if the element is not found.",
      "input_type": ["list", "str"],
      "answer_code": "def search_element(periodic_table, element):\n    try:\n        return periodic_table.index(element)\n    except ValueError:\n        return -1",
      "hint": "Use the index() method to find the position of the element. Handle the ValueError exception that occurs when the element is not found.",
      "test_inputs": [[['Hydrogen', 'Helium', 'Lithium', 'Beryllium'], 'Lithium'], [['Carbon', 'Nitrogen', 'Oxygen'], 'Fluorine'], [[], 'Neon'], [['Gold', 'Silver', 'Copper'], 'Silver']]
    },
    {
      "function_name": "sort_temperatures",
      "parameters": ["daily_readings"],
      "description": "Write a function that sorts a list of temperature readings in ascending order. Return the sorted list.",
      "input_type": ["list"],
      "answer_code": "def sort_temperatures(daily_readings):\n    return sorted(daily_readings)",
      "hint": "Use the sorted() function to create a new sorted list of temperature readings.",
      "test_inputs": [[[22.5, 19.8, 25.1, 20.3]], [[]], [[98.6]], [[-10.5, 15.0, 5.2, -5.8]]]
    },
    {
      "function_name": "highest_score",
      "parameters": ["game_scores"],
      "description": "Write a function that finds and returns the highest score from a list of game scores. Return 0 if the list is empty.",
      "input_type": ["list"],
      "answer_code": "def highest_score(game_scores):\n    if not game_scores:\n        return 0\n    return max(game_scores)",
      "hint": "Use the max() function to find the highest score in the list. Handle the empty list case separately.",
      "test_inputs": [[[105, 92, 98, 117, 85]], [[]], [[42]], [[10, 10, 10, 10]]]
    },
    {
      "function_name": "sort_movies_by_year",
      "parameters": ["movie_years", "movie_titles"],
      "description": "Write a function that sorts movie titles based on their release years. Return the sorted titles list. Assume the lists are of equal length and years are unique.",
      "input_type": ["list", "list"],
      "answer_code": "def sort_movies_by_year(movie_years, movie_titles):\n    pairs = sorted(zip(movie_years, movie_titles))\n    return [title for year, title in pairs]",
      "hint": "Use zip() to pair years with titles, then sort based on years. Extract just the titles from the sorted pairs.",
      "test_inputs": [[[1977, 1980, 1983], ['Star Wars', 'Empire Strikes Back', 'Return of the Jedi']], [[2008, 2012, 2010], ['Iron Man', 'Avengers', 'Iron Man 2']], [[], []], [[1997], ['Titanic']]]
    },
    {
      "function_name": "count_occurrences",
      "parameters": ["bird_sightings", "bird_species"],
      "description": "Write a function that counts how many times a specific bird species appears in a list of bird sightings. Return the count.",
      "input_type": ["list", "str"],
      "answer_code": "def count_occurrences(bird_sightings, bird_species):\n    return bird_sightings.count(bird_species)",
      "hint": "Use the count() method to count how many times the bird species appears in the list.",
      "test_inputs": [[['Robin', 'Bluejay', 'Cardinal', 'Robin', 'Robin'], 'Robin'], [['Eagle', 'Hawk', 'Falcon'], 'Owl'], [[], 'Sparrow'], [['Penguin', 'Penguin'], 'Penguin']]
    },
    {
      "function_name": "find_smallest_positive",
      "parameters": ["numbers"],
      "description": "Write a function that finds the smallest positive number in a list. Return -1 if there are no positive numbers.",
      "input_type": ["list"],
      "answer_code": "def find_smallest_positive(numbers):\n    positives = [num for num in numbers if num > 0]\n    if not positives:\n        return -1\n    return min(positives)",
      "hint": "Filter the list to include only positive numbers, then find the minimum value. Return -1 if the filtered list is empty.",
      "test_inputs": [[[3, -1, 5, 2, -4]], [[-2, -5, -1]], [[]], [[0, -3, 8, 4]]]
    },
    {
      "function_name": "alphabetize_patients",
      "parameters": ["waiting_list"],
      "description": "Write a function that returns a new list with patient names alphabetized for a clinic's waiting room. Return an empty list if the input is empty.",
      "input_type": ["list"],
      "answer_code": "def alphabetize_patients(waiting_list):\n    return sorted(waiting_list)",
      "hint": "Use the sorted() function to create a new list with patient names in alphabetical order.",
      "test_inputs": [[['Smith', 'Jones', 'Williams', 'Taylor']], [['Patel', 'Garcia', 'Kim']], [[]], [['Nguyen']]]
    },
    {
      "function_name": "top_three_scores",
      "parameters": ["student_scores"],
      "description": "Write a function that returns the top three highest scores from a list. If the list has fewer than three scores, return all scores in descending order.",
      "input_type": ["list"],
      "answer_code": "def top_three_scores(student_scores):\n    return sorted(student_scores, reverse=True)[:3]",
      "hint": "Sort the scores in descending order using sorted() with reverse=True, then get the first three elements using list slicing.",
      "test_inputs": [[[85, 92, 78, 95, 88]], [[91, 84]], [[]], [[100, 99, 98, 97, 96]]]
    },
    {
      "function_name": "find_products_under_price",
      "parameters": ["product_prices", "products", "max_price"],
      "description": "Write a function that returns a list of product names that are under a specified maximum price. Assumes prices and products lists are of equal length.",
      "input_type": ["list", "list", "float"],
      "answer_code": "def find_products_under_price(product_prices, products, max_price):\n    affordable_products = []\n    for i in range(len(product_prices)):\n        if product_prices[i] < max_price:\n            affordable_products.append(products[i])\n    return affordable_products",
      "hint": "Iterate through the prices and corresponding products, adding products to a new list when their price is below the maximum.",
      "test_inputs": [[[5.99, 10.50, 3.25, 7.80], ['Bread', 'Cheese', 'Apples', 'Milk'], 6.00], [[100, 50, 75], ['Shoes', 'Shirt', 'Pants'], 80], [[], [], 20], [[15.99], ['Book'], 10.00]]
    },
    {
      "function_name": "binary_search_city",
      "parameters": ["city_list", "target_city"],
      "description": "Write a function that performs a binary search for a city name in an alphabetically sorted list of cities. Return True if found, False otherwise.",
      "input_type": ["list", "str"],
      "answer_code": "def binary_search_city(city_list, target_city):\n    low = 0\n    high = len(city_list) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if city_list[mid] == target_city:\n            return True\n        elif city_list[mid] < target_city:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return False",
      "hint": "Implement binary search by repeatedly dividing the sorted list in half. Keep track of the low and high bounds and compare the middle element with the target city.",
      "test_inputs": [[['Boston', 'Chicago', 'Dallas', 'Miami', 'Seattle'], 'Dallas'], [['Atlanta', 'Denver', 'Phoenix'], 'New York'], [[], 'Paris'], [['London'], 'London']]
    },
    {
      "function_name": "sort_by_length",
      "parameters": ["song_titles"],
      "description": "Write a function that sorts a list of song titles based on their length (shortest to longest). If two titles have the same length, maintain their original order (stable sort).",
      "input_type": ["list"],
      "answer_code": "def sort_by_length(song_titles):\n    return sorted(song_titles, key=len)",
      "hint": "Use sorted() with the key parameter set to len to sort based on string length.",
      "test_inputs": [[['Bohemian Rhapsody', 'Hey Jude', 'Let It Be', 'Yesterday']], [['Imagine', 'Thriller', 'Respect']], [[]], [['Supercalifragilisticexpialidocious']]]
    },
    {
      "function_name": "merge_sorted_lists",
      "parameters": ["list1", "list2"],
      "description": "Write a function that merges two already-sorted lists of numbers into a single sorted list. The returned list should also be sorted.",
      "input_type": ["list", "list"],
      "answer_code": "def merge_sorted_lists(list1, list2):\n    merged_list = list1 + list2\n    return sorted(merged_list)",
      "hint": "Concatenate the two lists using the + operator, then sort the combined list using sorted().",
      "test_inputs": [[[1, 3, 5], [2, 4, 6]], [[10, 20, 30], [15, 25, 35]], [[], [1, 2, 3]], [[5, 10, 15], []]]
    },
    {
      "function_name": "reverse_sort_grades",
      "parameters": ["student_grades"],
      "description": "Write a function that sorts a list of student grades in descending order (highest to lowest). Return the sorted list.",
      "input_type": ["list"],
      "answer_code": "def reverse_sort_grades(student_grades):\n    return sorted(student_grades, reverse=True)",
      "hint": "Use sorted() with the reverse parameter set to True to sort in descending order.",
      "test_inputs": [[[85, 92, 78, 95, 88]], [[100, 65, 82]], [[]], [[77]]]
    },
    {
      "function_name": "find_closest_planet",
      "parameters": ["distances", "planet_names"],
      "description": "Write a function that finds the name of the planet that is closest to Earth based on a list of distances. Assume distances and planet_names are of equal length and non-empty.",
      "input_type": ["list", "list"],
      "answer_code": "def find_closest_planet(distances, planet_names):\n    min_index = distances.index(min(distances))\n    return planet_names[min_index]",
      "hint": "Find the minimum distance using min(), then find its index using index(). Use this index to retrieve the corresponding planet name.",
      "test_inputs": [[[149.6, 227.9, 778.5, 1427.0], ['Venus', 'Mars', 'Jupiter', 'Saturn']], [[57.9, 108.2], ['Mercury', 'Venus']], [[384.4], ['Moon']], [[0.0, 54.6, 78.3], ['Earth', 'Mercury', 'Venus']]]
    },
    {
      "function_name": "find_all_occurrences",
      "parameters": ["dna_sequence", "motif"],
      "description": "Write a function that finds all starting indices where a DNA motif occurs in a DNA sequence string. Return a list of indices.",
      "input_type": ["str", "str"],
      "answer_code": "def find_all_occurrences(dna_sequence, motif):\n    indices = []\n    start = 0\n    while True:\n        start = dna_sequence.find(motif, start)\n        if start == -1:\n            break\n        indices.append(start)\n        start += 1\n    return indices",
      "hint": "Use a loop with the find() method to locate occurrences. Start searching from the position after each match until no more matches are found.",
      "test_inputs": [['ACGTACGTACGT', 'ACG'], ['AAAAAA', 'AA'], ['GATTACA', 'ZZZ'], ['', 'A']]
    },
    {
      "function_name": "sort_multi_field",
      "parameters": ["player_scores", "player_names"],
      "description": "Write a function that sorts players primarily by their scores (highest to lowest) and secondarily by their names (alphabetically) when scores are equal. Return a list of player names in the sorted order.",
      "input_type": ["list", "list"],
      "answer_code": "def sort_multi_field(player_scores, player_names):\n    # Create pairs of (score, name)\n    pairs = list(zip(player_scores, player_names))\n    # Sort by score (descending) and then by name (ascending)\n    sorted_pairs = sorted(pairs, key=lambda x: (-x[0], x[1]))\n    # Extract just the names from the sorted pairs\n    return [name for score, name in sorted_pairs]",
      "hint": "Create pairs of (score, name) using zip(), then sort using a custom key function that sorts by negative score (for descending order) and then by name.",
      "test_inputs": [[[100, 95, 95, 90], ['Dave', 'Alice', 'Bob', 'Charlie']], [[85, 85, 85], ['Zach', 'Maya', 'Alex']], [[], []], [[500], ['Player1']]]
    },
    {
      "function_name": "filter_and_sort_tasks",
      "parameters": ["tasks", "priority_level"],
      "description": "Write a function that filters a list of task strings to include only those containing the specified priority level (e.g., 'HIGH', 'MEDIUM', 'LOW') and then sorts them alphabetically.",
      "input_type": ["list", "str"],
      "answer_code": "def filter_and_sort_tasks(tasks, priority_level):\n    filtered_tasks = [task for task in tasks if priority_level in task]\n    return sorted(filtered_tasks)",
      "hint": "Use a list comprehension to filter tasks containing the priority level, then sort the filtered list alphabetically.",
      "test_inputs": [[['Buy groceries (HIGH)', 'Call mom (LOW)', 'Finish report (HIGH)', 'Exercise (MEDIUM)'], 'HIGH'], [['Study for exam (MEDIUM)', 'Clean room (LOW)'], 'HIGH'], [[], 'MEDIUM'], [['Single task (LOW)'], 'LOW']]
    },
    {
      "function_name": "bubble_sort_animals",
      "parameters": ["animal_list"],
      "description": "Write a function that implements the bubble sort algorithm to sort a list of animal names alphabetically. Return the sorted list.",
      "input_type": ["list"],
      "answer_code": "def bubble_sort_animals(animal_list):\n    n = len(animal_list)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if animal_list[j] > animal_list[j + 1]:\n                animal_list[j], animal_list[j + 1] = animal_list[j + 1], animal_list[j]\n    return animal_list",
      "hint": "Implement bubble sort by comparing adjacent elements and swapping them if they are in the wrong order, repeating until the list is sorted.",
      "test_inputs": [[['Zebra', 'Lion', 'Elephant', 'Giraffe']], [['Tiger', 'Bear']], [[]], [['Kangaroo']]]
    }
  ]
}
