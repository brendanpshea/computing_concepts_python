{
    "questions": [
        {
            "function_name": "create_empty_spaceship",
            "parameters": [],
            "description": "Create an empty dictionary to store spaceship data. Every great space adventure starts with an empty vessel waiting to be filled with crew, cargo, and questionable contraband. Just use empty curly braces {}.",
            "input_type": [],
            "answer_code": "def create_empty_spaceship():\n    return {}",
            "hint": "Use empty curly braces {} to create your empty spaceship manifest",
            "test_inputs": [
                [],
                [],
                [],
                [],
                []
            ]
        },
        {
            "function_name": "create_alien_id",
            "parameters": [],
            "description": "Create a dictionary for an alien's basic ID card with one key 'species' and value 'Zorgian'. This is the most basic form of intergalactic identification accepted at any space port.",
            "input_type": [],
            "answer_code": "def create_alien_id():\n    return {'species': 'Zorgian'}",
            "hint": "Use curly braces with 'species': 'Zorgian' inside",
            "test_inputs": [
                [],
                [],
                [],
                [],
                []
            ]
        },
        {
            "function_name": "add_crew_member",
            "parameters": ["crew_manifest", "position", "name"],
            "description": "Add a new crew member to the ship's manifest (dictionary). For example, if you pass an empty manifest, 'pilot' as position, and 'Starlord' as name, the manifest should become {'pilot': 'Starlord'}.",
            "input_type": ["dict", "string", "string"],
            "answer_code": "def add_crew_member(crew_manifest, position, name):\n    crew_manifest[position] = name\n    return crew_manifest",
            "hint": "Use crew_manifest[position] = name to add the crew member",
            "test_inputs": [
                [{}, "pilot", "Starlord"],
                [{"engineer": "Rocket"}, "captain", "Quill"],
                [{"doctor": "Zoidberg"}, "pilot", "Leela"],
                [{"scientist": "Farnsworth"}, "intern", "Fry"],
                [{"mechanic": "Kaylee"}, "captain", "Mal"]
            ]
        },
        {
            "function_name": "get_weapon_power",
            "parameters": ["weapons", "weapon_name"],
            "description": "Look up the power level of a weapon in the ship's weapons dictionary. For example, if weapons is {'laser': 50} and weapon_name is 'laser', return 50. Essential knowledge for space battles!",
            "input_type": ["dict", "string"],
            "answer_code": "def get_weapon_power(weapons, weapon_name):\n    return weapons[weapon_name]",
            "hint": "Use weapons[weapon_name] to get the power level",
            "test_inputs": [
                [{"laser": 50}, "laser"],
                [{"plasma": 100}, "plasma"],
                [{"photon": 75}, "photon"],
                [{"sonic": 25}, "sonic"],
                [{"quantum": 200}, "quantum"]
            ]
        },
        {
            "function_name": "update_shield_strength",
            "parameters": ["shields", "section", "new_strength"],
            "description": "Update the shield strength for a section of the ship. If the shields dictionary shows {'front': 50} and you need to change 'front' to 75, this will update the shield power level.",
            "input_type": ["dict", "string", "int"],
            "answer_code": "def update_shield_strength(shields, section, new_strength):\n    shields[section] = new_strength\n    return shields",
            "hint": "Use shields[section] = new_strength to update shield power",
            "test_inputs": [
                [{"front": 50}, "front", 75],
                [{"rear": 100}, "rear", 80],
                [{"left": 60}, "left", 90],
                [{"right": 70}, "right", 85],
                [{"top": 40}, "top", 95]
            ]
        },
        {
            "function_name": "create_coordinate_pair",
            "parameters": ["x", "y"],
            "description": "Create a dictionary for galactic coordinates where 'x' maps to the x coordinate and 'y' to the y coordinate. Used by the ship's navigation system to plot courses through space.",
            "input_type": ["int", "int"],
            "answer_code": "def create_coordinate_pair(x, y):\n    return {'x': x, 'y': y}",
            "hint": "Create dictionary with 'x' and 'y' as keys",
            "test_inputs": [
                [5, 10],
                [1, 2],
                [100, 200],
                [0, 1],
                [42, 99]
            ]
        },
        {
            "function_name": "eject_cargo",
            "parameters": ["cargo_hold", "item"],
            "description": "Remove an item from the cargo hold dictionary using the del statement. Sometimes you need to lighten the load when running from space pirates! If cargo_hold is {'credits': 1000, 'contraband': 50} and item is 'contraband', you'll be left with just {'credits': 1000}.",
            "input_type": ["dict", "string"],
            "answer_code": "def eject_cargo(cargo_hold, item):\n    del cargo_hold[item]\n    return cargo_hold",
            "hint": "Use del cargo_hold[item] to jettison the cargo",
            "test_inputs": [
                [{"credits": 1000, "contraband": 50}, "contraband"],
                [{"fuel": 100, "food": 200}, "food"],
                [{"weapons": 5, "shields": 3}, "weapons"],
                [{"maps": "secret", "plans": "classified"}, "plans"],
                [{"oxygen": "low", "fuel": "full"}, "oxygen"]
            ]
        },
        {
            "function_name": "create_alien_contact",
            "parameters": ["species", "greeting"],
            "description": "Create a new alien contact in the universal translator. Each entry pairs an alien species with their traditional greeting. For example, species 'Vulcan' and greeting 'Live Long and Prosper' creates {'Vulcan': 'Live Long and Prosper'}.",
            "input_type": ["string", "string"],
            "answer_code": "def create_alien_contact(species, greeting):\n    return {species: greeting}",
            "hint": "Create dictionary with species: greeting pair",
            "test_inputs": [
                ["Vulcan", "Live Long and Prosper"],
                ["Klingon", "Qapla"],
                ["Wookie", "Rrrrrr-ghghghghghgh"],
                ["Martian", "Ack Ack"],
                ["Groot", "I am Groot"]
            ]
        },
        {
            "function_name": "is_cargo_hold_empty",
            "parameters": ["cargo_hold"],
            "description": "Check if the cargo hold is completely empty (has no items). Return 'yes' if it's empty like {}, 'no' if it contains any cargo. Crucial check before taking on new smuggling... er, trading missions.",
            "input_type": ["dict"],
            "answer_code": "def is_cargo_hold_empty(cargo_hold):\n    return 'yes' if not cargo_hold else 'no'",
            "hint": "Use 'not cargo_hold' to check if empty",
            "test_inputs": [
                [{}],
                [{"credits": 1000}],
                [{"fuel": "full"}],
                [{"cargo": "mysterious"}],
                [{"contraband": "definitely not contraband"}]
            ]
        },
        {
            "function_name": "clone_ship_data",
            "parameters": ["ship_data"],
            "description": "Create an exact copy of a ship's data dictionary using the copy() method. Useful when registering your totally legitimate vessel under a new identity at each space port.",
            "input_type": ["dict"],
            "answer_code": "def clone_ship_data(ship_data):\n    return ship_data.copy()",
            "hint": "Use the copy() method to duplicate the data",
            "test_inputs": [
                [{"name": "Serenity", "class": "Firefly"}],
                [{"name": "Planet Express", "type": "Delivery"}],
                [{"name": "Milano", "type": "Star-Lord's"}],
                [{"name": "Nostromo", "type": "Commercial"}],
                [{"name": "Heart of Gold", "type": "Infinite Improbability"}]
            ]
        }
    ]
}
