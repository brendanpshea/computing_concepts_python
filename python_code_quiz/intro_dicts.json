{
    "questions": [
        {
            "function_name": "create_alien_profile",
            "parameters": ["name", "species", "home_planet"],
            "description": "Create and return a dictionary containing the alien's profile information.",
            "input_type": ["string", "string", "string"],
            "answer_code": "def create_alien_profile(name, species, home_planet):\n    return {'name': name, 'species': species, 'home_planet': home_planet}",
            "hint": "Create a dictionary with three key-value pairs.",
            "test_inputs": [
                ["Zorg", "Zorgian", "Zorgopia"],
                ["ET", "Unknown", "Unknown"],
                ["Spock", "Vulcan", "Vulcan"],
                ["Groot", "Flora Colossus", "Planet X"],
                ["Thanos", "Eternal", "Titan"]
            ]
        },
        {
            "function_name": "get_spaceship_speed",
            "parameters": ["ship_speeds", "ship_name"],
            "description": "Return the speed of the specified spaceship from the dictionary of speeds.",
            "input_type": ["dict", "string"],
            "answer_code": "def get_spaceship_speed(ship_speeds, ship_name):\n    return ship_speeds.get(ship_name, 0)",
            "hint": "Use the get() method with a default value.",
            "test_inputs": [
                [{"Millennium Falcon": 75, "Enterprise": 100}, "Millennium Falcon"],
                [{"Serenity": 50, "Galactica": 80}, "Serenity"],
                [{"Death Star": 10, "X-Wing": 95}, "TIE Fighter"],
                [{"Voyager": 85, "Discovery": 70}, "Voyager"],
                [{"Nostromo": 45, "Sulaco": 55}, "Sulaco"]
            ]
        },
        {
            "function_name": "update_inventory",
            "parameters": ["inventory", "item", "quantity"],
            "description": "Add or update the quantity of an item in the inventory dictionary.",
            "input_type": ["dict", "string", "int"],
            "answer_code": "def update_inventory(inventory, item, quantity):\n    inventory[item] = inventory.get(item, 0) + quantity\n    return inventory",
            "hint": "Use the get() method to handle new items and add the quantity.",
            "test_inputs": [
                [{"phaser": 5, "tricorder": 3}, "phaser", 2],
                [{"lightsaber": 1}, "force crystal", 3],
                [{"space food": 10}, "space food", -5],
                [{"fuel cells": 20}, "oxygen tanks", 5],
                [{}, "emergency beacon", 1]
            ]
        },
        {
            "function_name": "translate_alien",
            "parameters": ["translator", "message"],
            "description": "Translate each word in the message using the translator dictionary. Unknown words stay unchanged.",
            "input_type": ["dict", "string"],
            "answer_code": "def translate_alien(translator, message):\n    words = message.split()\n    translated = [translator.get(word, word) for word in words]\n    return ' '.join(translated)",
            "hint": "Split the message, translate each word using get(), then join.",
            "test_inputs": [
                [{"klaatu": "greetings", "barada": "earthlings"}, "klaatu barada"],
                [{"bleep": "hello", "bloop": "friend"}, "bleep bloop stranger"],
                [{"nanu": "earth", "mork": "calling"}, "nanu nanu"],
                [{"vogon": "warning", "poetry": "incoming"}, "vogon poetry alert"],
                [{"ping": "message", "pong": "received"}, "ping pong"]
            ]
        },
        {
            "function_name": "merge_cargo_manifests",
            "parameters": ["manifest1", "manifest2"],
            "description": "Combine two cargo manifests, summing quantities of shared items.",
            "input_type": ["dict", "dict"],
            "answer_code": "def merge_cargo_manifests(manifest1, manifest2):\n    merged = manifest1.copy()\n    for item, quantity in manifest2.items():\n        merged[item] = merged.get(item, 0) + quantity\n    return merged",
            "hint": "Copy first manifest and update with second, adding quantities.",
            "test_inputs": [
                [{"dilithium": 5, "plasma": 3}, {"plasma": 2, "tritium": 4}],
                [{"food": 10}, {"water": 15}],
                [{"fuel": 100, "oxygen": 50}, {"fuel": 50, "repairs": 10}],
                [{"maps": 1, "sensors": 2}, {"sensors": 3}],
                [{}, {"emergency kit": 1}]
            ]
        }
    ]
}
