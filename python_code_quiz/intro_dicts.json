{
    "questions": [
        {
            "function_name": "create_empty_dictionary", 
            "parameters": [],
            "description": "Return an empty dictionary. This is the most basic way to create a dictionary in Python - just use empty curly braces {}. You'll use this whenever you need to start building a new dictionary.",
            "input_type": [],
            "answer_code": "def create_empty_dictionary():\n    return {}",
            "hint": "Use empty curly braces {}",
            "test_inputs": [
                [],
                [],
                [],
                [],
                []
            ]
        },
        {
            "function_name": "create_simple_dictionary",
            "parameters": [],
            "description": "Create and return a dictionary with exactly one key 'color' and value 'blue'. This shows how to create a dictionary with a single key-value pair using curly braces. The key and value are separated by a colon.",
            "input_type": [],
            "answer_code": "def create_simple_dictionary():\n    return {'color': 'blue'}",
            "hint": "Use curly braces with 'color': 'blue' inside",
            "test_inputs": [
                [],
                [],
                [],
                [],
                []
            ]
        },
        {
            "function_name": "add_key_value",
            "parameters": ["dictionary", "key", "value"],
            "description": "Add a new key and value to the dictionary. For example, if you pass {'a': 1} as the dictionary, 'b' as the key, and 2 as the value, the dictionary should become {'a': 1, 'b': 2}. This shows how to add new items to a dictionary using square bracket notation.",
            "input_type": ["dict", "string", "int"],
            "answer_code": "def add_key_value(dictionary, key, value):\n    dictionary[key] = value\n    return dictionary",
            "hint": "Use dictionary[key] = value to add the new pair",
            "test_inputs": [
                [{}, "x", 1],
                [{"a": 1}, "b", 2],
                [{"name": "Alice"}, "age", 25],
                [{"red": 255}, "blue", 255],
                [{"count": 0}, "step", 1]
            ]
        },
        {
            "function_name": "get_value",
            "parameters": ["dictionary", "key"],
            "description": "Return the value associated with the given key in the dictionary. For example, if the dictionary is {'name': 'Alice'} and the key is 'name', return 'Alice'. This shows the basic way to look up values using square bracket notation.",
            "input_type": ["dict", "string"],
            "answer_code": "def get_value(dictionary, key):\n    return dictionary[key]",
            "hint": "Use dictionary[key] to get the value",
            "test_inputs": [
                [{"a": 1}, "a"],
                [{"name": "Bob"}, "name"],
                [{"x": 100}, "x"],
                [{"color": "red"}, "color"],
                [{"test": True}, "test"]
            ]
        },
        {
            "function_name": "change_value",
            "parameters": ["dictionary", "key", "new_value"],
            "description": "Change the value for an existing key in the dictionary. For example, if the dictionary is {'score': 10} and you want to change 'score' to 20, update the value and return the modified dictionary. This shows how to modify existing values.",
            "input_type": ["dict", "string", "int"],
            "answer_code": "def change_value(dictionary, key, new_value):\n    dictionary[key] = new_value\n    return dictionary",
            "hint": "Use dictionary[key] = new_value to change the value",
            "test_inputs": [
                [{"x": 1}, "x", 2],
                [{"score": 10}, "score", 20],
                [{"count": 0}, "count", 1],
                [{"value": 100}, "value", 200],
                [{"number": 5}, "number", 10]
            ]
        },
        {
            "function_name": "create_number_pairs",
            "parameters": ["num1", "num2"],
            "description": "Create a dictionary where 'first' maps to num1 and 'second' maps to num2. For example, if num1 is 5 and num2 is 10, return {'first': 5, 'second': 10}. This shows how to create a dictionary with multiple key-value pairs using parameters.",
            "input_type": ["int", "int"],
            "answer_code": "def create_number_pairs(num1, num2):\n    return {'first': num1, 'second': num2}",
            "hint": "Create dictionary with 'first' and 'second' as keys",
            "test_inputs": [
                [5, 10],
                [1, 2],
                [100, 200],
                [0, 1],
                [42, 99]
            ]
        },
        {
            "function_name": "remove_key",
            "parameters": ["dictionary", "key"],
            "description": "Remove the given key and its value from the dictionary using the del statement. For example, if the dictionary is {'a': 1, 'b': 2} and the key is 'a', the dictionary should become {'b': 2}. This shows how to delete items from a dictionary.",
            "input_type": ["dict", "string"],
            "answer_code": "def remove_key(dictionary, key):\n    del dictionary[key]\n    return dictionary",
            "hint": "Use del dictionary[key] to remove the pair",
            "test_inputs": [
                [{"a": 1, "b": 2}, "a"],
                [{"name": "Alice", "age": 25}, "age"],
                [{"x": 0, "y": 0}, "x"],
                [{"test": True, "debug": False}, "debug"],
                [{"color": "red", "size": "large"}, "size"]
            ]
        },
        {
            "function_name": "create_string_pairs",
            "parameters": ["key_name", "value_text"],
            "description": "Create and return a dictionary with one key-value pair, using key_name as the key and value_text as the value. For example, if key_name is 'name' and value_text is 'Alice', return {'name': 'Alice'}. This reinforces creating dictionaries with string values.",
            "input_type": ["string", "string"],
            "answer_code": "def create_string_pairs(key_name, value_text):\n    return {key_name: value_text}",
            "hint": "Create dictionary with key_name: value_text",
            "test_inputs": [
                ["name", "Alice"],
                ["color", "blue"],
                ["city", "Paris"],
                ["day", "Monday"],
                ["mood", "happy"]
            ]
        },
        {
            "function_name": "is_dictionary_empty",
            "parameters": ["dictionary"],
            "description": "Return True if the dictionary is empty (has no key-value pairs), False otherwise. For example, {} is empty but {'a': 1} is not. This shows how to check if a dictionary contains any items using the not operator.",
            "input_type": ["dict"],
            "answer_code": "def is_dictionary_empty(dictionary):\n    return not dictionary",
            "hint": "Use 'not dictionary' to check if empty",
            "test_inputs": [
                [{}],
                [{"a": 1}],
                [{"name": "Bob"}],
                [{"x": 0, "y": 0}],
                [{"test": True}]
            ]
        },
        {
            "function_name": "copy_dictionary",
            "parameters": ["dictionary"],
            "description": "Create and return a copy of the given dictionary using the copy() method. This creates a new dictionary with the same key-value pairs as the original. This shows how to safely copy dictionaries instead of creating a reference to the original.",
            "input_type": ["dict"],
            "answer_code": "def copy_dictionary(dictionary):\n    return dictionary.copy()",
            "hint": "Use the copy() method",
            "test_inputs": [
                [{"a": 1, "b": 2}],
                [{"name": "Charlie"}],
                [{"x": 10, "y": 20}],
                [{"test": True}],
                [{}]
            ]
        },
        {
            "function_name": "create_pet_profile",
            "parameters": ["name", "species", "age"],
            "description": "Create a dictionary that stores information about a pet. The dictionary should have three keys: 'name', 'species', and 'age', with their corresponding values from the parameters. You might start with something like my_dict = {'name':name....",
            "input_type": ["string", "string", "int"],
            "answer_code": "def create_pet_profile(name, species, age):\n    return {'name': name, 'species': species, 'age': age}",
            "hint": "Create a dictionary with three key-value pairs using curly braces.",
            "test_inputs": [
                ["Luna", "cat", 3],
                ["Max", "dog", 5],
                ["Bubbles", "fish", 1],
                ["Pip", "parrot", 2],
                ["Ziggy", "hamster", 1]
            ]
        },
        {
            "function_name": "get_favorite_color",
            "parameters": ["preferences", "person"],
            "description": "Look up and return a person's favorite color from a dictionary of preferences. The preferences dictionary contains people's names as keys and their favorite colors as values. This function demonstrates how to access values in a dictionary using keys.",
            "input_type": ["dict", "string"],
            "answer_code": "def get_favorite_color(preferences, person):\n    return preferences[person]",
            "hint": "Use square bracket notation to access dictionary values.",
            "test_inputs": [
                [{"Alice": "blue", "Bob": "red"}, "Alice"],
                [{"Charlie": "green", "Diana": "purple"}, "Diana"],
                [{"Eva": "yellow", "Frank": "orange"}, "Eva"],
                [{"Grace": "pink", "Henry": "brown"}, "Henry"],
                [{"Ivy": "white", "Jack": "black"}, "Jack"]
            ]
        },
        {
            "function_name": "update_score",
            "parameters": ["scores", "player", "points"],
            "description": "Add points to a player's existing score in the scores dictionary. The dictionary contains player names as keys and their current scores as values. This function shows how to modify values in a dictionary. First access the current score using the player name as the key, then add the new points to it.",
            "input_type": ["dict", "string", "int"],
            "answer_code": "def update_score(scores, player, points):\n    scores[player] = scores[player] + points\n    return scores",
            "hint": "Use square bracket notation to modify dictionary values.",
            "test_inputs": [
                [{"Player1": 10, "Player2": 20}, "Player1", 5],
                [{"Mario": 100, "Luigi": 50}, "Luigi", 10],
                [{"Pac-Man": 200, "Ghost": 150}, "Pac-Man", 50],
                [{"Sonic": 300, "Tails": 250}, "Sonic", 100],
                [{"Kirby": 75, "Meta Knight": 80}, "Kirby", 25]
            ]
        },
        {
            "function_name": "check_key_exists",
            "parameters": ["dictionary", "key"],
            "description": "Check if a specific key exists in the dictionary. Return True if the key is found in the dictionary, False if it isn't. This is a common operation when you need to verify if data exists before trying to access it. The 'in' operator provides a simple way to check for key existence.",
            "input_type": ["dict", "string"],
            "answer_code": "def check_key_exists(dictionary, key):\n    return key in dictionary",
            "hint": "Use the 'in' operator to check if a key exists.",
            "test_inputs": [
                [{"apple": 1, "banana": 2}, "apple"],
                [{"cat": "meow", "dog": "woof"}, "fish"],
                [{"red": "#FF0000", "blue": "#0000FF"}, "green"],
                [{"name": "Alice", "age": 25}, "name"],
                [{}, "empty"]
            ]
        },
        {
            "function_name": "get_all_keys",
            "parameters": ["dictionary"],
            "description": "Create a list containing all the keys from the dictionary. The keys() method returns a special view object of all keys, which needs to be cast to a list using list(). This is useful when you need to work with all the keys in a dictionary, such as iterating over them or checking what data is available.",
            "input_type": "dict",
            "answer_code": "def get_all_keys(dictionary):\n    return list(dictionary.keys())",
            "hint": "Use the keys() method and convert to a list.",
            "test_inputs": [
                {"a": 1, "b": 2, "c": 3},
                {"name": "Bob", "age": 30},
                {"red": 255, "green": 128, "blue": 0},
                {"Monday": "sunny", "Tuesday": "rainy"},
                {}
            ]
        },
        {
            "function_name": "count_values",
            "parameters": ["dictionary"],
            "description": "Count how many key-value pairs are in the dictionary and return this number. The len() function on a dictionary returns the total number of pairs it contains. This is helpful when you need to know the size of a dictionary or check if it's empty (length would be 0).",
            "input_type": "dict",
            "answer_code": "def count_values(dictionary):\n    return len(dictionary)",
            "hint": "Use the len() function on the dictionary.",
            "test_inputs": [
                {"a": 1, "b": 2},
                {"name": "Charlie"},
                {"x": 0, "y": 0, "z": 0},
                {},
                {"one": 1, "two": 2, "three": 3, "four": 4}
            ]
        },
        {
            "function_name": "get_safe_value",
            "parameters": ["dictionary", "key", "default"],
            "description": "Safely retrieve a value from the dictionary using the get() method. If the key exists, return its value. If the key doesn't exist, return the default value instead. This is a safer way to access dictionary values compared to square brackets, which would raise an error for missing keys.",
            "input_type": ["dict", "string", "string"],
            "answer_code": "def get_safe_value(dictionary, key, default):\n    return dictionary.get(key, default)",
            "hint": "Use the get() method with a default value.",
            "test_inputs": [
                [{"name": "Dave", "age": 25}, "name", "Unknown"],
                [{"color": "blue"}, "size", "Not specified"],
                [{}, "type", "None"],
                [{"fruit": "apple"}, "vegetable", "carrot"],
                [{"day": "Monday"}, "month", "January"]
            ]
        },
        {
            "function_name": "merge_dictionaries",
            "parameters": ["dict1", "dict2"],
            "description": "Combine two dictionaries into a new one. First, create a copy of dict1 using copy() to avoid modifying the original. Then use update() to add all key-value pairs from dict2. If dict2 has any keys that were in dict1, the values from dict2 will replace the original values. This shows how to safely combine dictionary data.",
            "input_type": ["dict", "dict"],
            "answer_code": "def merge_dictionaries(dict1, dict2):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict",
            "hint": "Copy the first dictionary and update it with the second.",
            "test_inputs": [
                [{"a": 1}, {"b": 2}],
                [{"name": "Eve"}, {"age": 28}],
                [{"x": 10}, {}],
                [{}, {"y": 20}],
                [{"color": "red"}, {"size": "large"}]
            ]
        },
        {
            "function_name": "sum_values",
            "parameters": ["dictionary"],
            "description": "Calculate the sum of all values in the dictionary. Use the values() method to get all values, then sum them with the sum() function. This only works when all the values are numbers. This function demonstrates how to perform calculations on dictionary values without needing to access the keys.",
            "input_type": "dict",
            "answer_code": "def sum_values(dictionary):\n    return sum(dictionary.values())",
            "hint": "Use the values() method with the sum() function.",
            "test_inputs": [
                {"a": 1, "b": 2, "c": 3},
                {"score1": 10, "score2": 20},
                {"x": 5},
                {"val1": 100, "val2": 200, "val3": 300},
                {}
            ]
        },
        {
            "function_name": "print_key_value_pairs",
            "parameters": ["dictionary"],
            "description": "Create a formatted list of strings showing each key-value pair. Use the items() method to get all pairs, then create a string for each pair using an f-string with format 'key: value'. This demonstrates how to loop through all key-value pairs in a dictionary and format them for display. The function uses a list comprehension to build the result list efficiently.",
            "input_type": "dict",
            "answer_code": "def print_key_value_pairs(dictionary):\n    return [f'{key}: {value}' for key, value in dictionary.items()]",
            "hint": "Use items() method and list comprehension with f-strings.",
            "test_inputs": [
                {"name": "Frank", "age": 30},
                {"color": "green", "size": "medium"},
                {"temperature": 72, "humidity": 65},
                {"day": "Wednesday"},
                {}
            ]
        }
    ]
}
