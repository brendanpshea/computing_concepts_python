{
    "questions": [
        {
            "function_name": "create_empty_spaceship",
            "parameters": [],
            "description": "Create and return an empty dictionary to store spaceship data. You must return an empty dictionary using just {}. Every great space adventure starts with an empty vessel! For example: create_empty_spaceship() should return {}",
            "input_type": [],
            "answer_code": "def create_empty_spaceship():\n    return {}",
            "hint": "Use empty curly braces {} to create your empty spaceship manifest",
            "test_inputs": []
        },
        {
            "function_name": "create_alien_id",
            "parameters": [],
            "description": "Create and return a dictionary containing exactly one key-value pair: the key should be 'species' and the value should be 'Zorgian'. For example: create_alien_id() should return {'species': 'Zorgian'}. This is the most basic form of intergalactic identification accepted at any space port.",
            "input_type": [],
            "answer_code": "def create_alien_id():\n    return {'species': 'Zorgian'}",
            "hint": "Use curly braces with 'species': 'Zorgian' inside",
            "test_inputs": []
        },
        {
            "function_name": "add_crew_member",
            "parameters": ["crew_manifest", "position", "name"],
            "description": "Add a new crew member to the ship's manifest (dictionary) and return the updated manifest. Given a crew_manifest dictionary, a position string, and a name string, add the position:name pair to the manifest and return it. For example: add_crew_member({}, 'pilot', 'Starlord') should return {'pilot': 'Starlord'}. If the manifest already has crew members, the new one should be added to the existing ones.",
            "input_type": ["dict", "string", "string"],
            "answer_code": "def add_crew_member(crew_manifest, position, name):\n    crew_manifest[position] = name\n    return crew_manifest",
            "hint": "Use crew_manifest[position] = name to add the crew member",
            "test_inputs": [
                [{}, "pilot", "Starlord"],
                [{"engineer": "Rocket"}, "captain", "Quill"],
                [{"doctor": "Zoidberg"}, "pilot", "Leela"],
                [{"scientist": "Farnsworth"}, "intern", "Fry"],
                [{"mechanic": "Kaylee"}, "captain", "Mal"]
            ]
        },
        {
            "function_name": "get_value",
            "parameters": ["dictionary", "key"],
            "description": "Return the value associated with the given key in the dictionary. For example, if the dictionary is {'name': 'Alice'} and the key is 'name', return 'Alice'. This shows the basic way to look up values using square bracket notation.",
            "input_type": ["dict", "string"],
            "answer_code": "def get_value(dictionary, key):\n    return dictionary[key]",
            "hint": "Use dictionary[key] to get the value",
            "test_inputs": [
                [{"a": 1}, "a"],
                [{"name": "Bob"}, "name"],
                [{"x": 100}, "x"],
                [{"color": "red"}, "color"],
                [{"test": "yes"}, "test"]
            ]
        },
        {
            "function_name": "is_cargo_hold_empty",
            "parameters": ["cargo_hold"],
            "description": "Check if the cargo hold is empty and return a string indicating its status. Return 'yes' if cargo_hold is an empty dictionary ({}), return 'no' if it contains any items. For example: is_cargo_hold_empty({}) should return 'yes', while is_cargo_hold_empty({'credits': 1000}) should return 'no'. Better check before accepting any questionable cargo!",
            "input_type": ["dict"],
            "answer_code": "def is_cargo_hold_empty(cargo_hold):\n    return 'yes' if not cargo_hold else 'no'",
            "hint": "Use 'not cargo_hold' to check if empty",
            "test_inputs": [
                {},
                {"credits": 1000},
                {"fuel": "full"},
                {"cargo": "mysterious"},
                {"contraband": "definitely not contraband"}
            ]
        },
        {
            "function_name": "clone_ship_data",
            "parameters": ["ship_data"],
            "description": "Create and return an exact copy of a ship's data dictionary. Given a ship_data dictionary, return a new dictionary with the same key-value pairs using the copy() method. For example: clone_ship_data({'name': 'Serenity', 'class': 'Firefly'}) should return {'name': 'Serenity', 'class': 'Firefly'} but as a new dictionary. Useful for registering your totally legitimate vessel under a new identity!",
            "input_type": ["dict"],
            "answer_code": "def clone_ship_data(ship_data):\n    return ship_data.copy()",
            "hint": "Use the copy() method to duplicate the data",
            "test_inputs": [
                {"name": "Serenity", "class": "Firefly"},
                {"name": "Planet Express", "type": "Delivery"},
                {"name": "Milano", "type": "Star-Lord's"},
                {"name": "Nostromo", "type": "Commercial"},
                {"name": "Heart of Gold", "type": "Infinite Improbability"}
            ]
        }
    ]
}
