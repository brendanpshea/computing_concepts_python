{
    "questions": [
        {
            "function_name": "alien_greeting",
            "parameters": ["name"],
            "description": "Return a greeting message to an alien named 'name'.",
            "input_type": "string",
            "answer_code": "def alien_greeting(name):\n    return f'Welcome to Earth, {name}!'",
            "hint": "Use an f-string to create the greeting message.",
            "test_inputs": [
                "Zorg",
                "E.T.",
                "Spock",
                "Klaatu",
                "Yoda"
            ]
        },
        {
            "function_name": "calculate_hyperspace_distance",
            "parameters": ["distance1", "distance2"],
            "description": "Calculate the total distance of two hyperspace jumps.",
            "input_type": ["float", "float"],
            "answer_code": "def calculate_hyperspace_distance(distance1, distance2):\n    return distance1 + distance2",
            "hint": "Add the two distances together.",
            "test_inputs": [
                [12.5, 7.8],
                [3.4, 5.6],
                [100.0, 200.0],
                [0.0, 50.0],
                [42.0, 58.0]
            ]
        },
        {
            "function_name": "decrypt_message",
            "parameters": ["message"],
            "description": "Return the decrypted version of the message by reversing it.",
            "input_type": "string",
            "answer_code": "def decrypt_message(message):\n    return message[::-1]",
            "hint": "Reverse the string using slicing.",
            "test_inputs": [
                "!dlroW ,olleH",
                "gninrom dooG",
                "!ereht iH",
                "ssap ym s'teL",
                ".egassem terces a s'tI"
            ]
        },
        {
            "function_name": "calculate_energy",
            "parameters": ["mass"],
            "description": "Calculate the energy equivalent of a mass using E=mc^2. c = 299792458.",
            "input_type": "float",
            "answer_code": "def calculate_energy(mass):\n    c = 299792458\n    return mass * c ** 2",
            "hint": "Use the formula E = mass * c squared.",
            "test_inputs": [
                1.0,
                0.5,
                2.0,
                0.1,
                0.001
            ]
        },
        {
            "function_name": "join_planet_names",
            "parameters": ["planet1", "planet2"],
            "description": "Return the two planet names joined with ' and ' in between.",
            "input_type": ["string", "string"],
            "answer_code": "def join_planet_names(planet1, planet2):\n    return planet1 + ' and ' + planet2",
            "hint": "Concatenate the strings with ' and ' in between.",
            "test_inputs": [
                ["Earth", "Mars"],
                ["Vulcan", "Krypton"],
                ["Tatooine", "Naboo"],
                ["Pandora", "Arrakis"],
                ["Gallifrey", "Cybertron"]
            ]
        },
        {
            "function_name": "calculate_oxygen_supply",
            "parameters": ["hours", "astronauts"],
            "description": "Calculate the total oxygen needed for a mission. Multiply hours, astronauts, and oxygen per hour (0.84).",
            "input_type": ["int", "int"],
            "answer_code": "def calculate_oxygen_supply(hours, astronauts):\n    oxygen_per_hour = 0.84\n    return hours * astronauts * oxygen_per_hour",
            "hint": "Multiply hours, astronauts, and oxygen per hour.",
            "test_inputs": [
                [24, 3],
                [48, 4],
                [72, 6],
                [12, 2],
                [168, 5]
            ]
        },
        {
            "function_name": "get_starship_code",
            "parameters": ["starship_name"],
            "description": "Return the first three letters of the starship name in uppercase.",
            "input_type": "string",
            "answer_code": "def get_starship_code(starship_name):\n    return starship_name[:3].upper()",
            "hint": "Use slicing and the upper() method.",
            "test_inputs": [
                "Enterprise",
                "Millennium Falcon",
                "Serenity",
                "Galactica",
                "Rocinante"
            ]
        },
        {
            "function_name": "format_coordinates",
            "parameters": ["x_coord", "y_coord", "z_coord"],
            "description": "Return the coordinates formatted as '(x, y, z)'.",
            "input_type": ["float", "float", "float"],
            "answer_code": "def format_coordinates(x_coord, y_coord, z_coord):\n    return f'({x_coord}, {y_coord}, {z_coord})'",
            "hint": "Use an f-string to format the coordinates.",
            "test_inputs": [
                [1.0, 2.0, 3.0],
                [0.0, 0.0, 0.0],
                [-1.5, 2.3, -3.6],
                [42.0, 17.0, 23.0],
                [3.14, 1.59, 2.65]
            ]
        },
        {
            "function_name": "alien_age_in_earth_years",
            "parameters": ["alien_age", "planet_year_length"],
            "description": "Convert alien age to Earth years given the planet's year length. Multiply the alien age by the planet's year length in Earth years.",
            "input_type": ["float", "float"],
            "answer_code": "def alien_age_in_earth_years(alien_age, planet_year_length):\n    return alien_age * planet_year_length",
            "hint": "Multiply the alien age by the planet's year length in Earth years.",
            "test_inputs": [
                [10, 0.5],
                [20, 1.88],
                [5, 11.86],
                [100, 0.241],
                [50, 29.46]
            ]
        },
        {
            "function_name": "ship_name_length",
            "parameters": ["ship_name"],
            "description": "Return the number of characters in the ship's name.",
            "input_type": "string",
            "answer_code": "def ship_name_length(ship_name):\n    return len(ship_name)",
            "hint": "Use the len() function to get the length.",
            "test_inputs": [
                "USS Enterprise",
                "Discovery One",
                "Heart of Gold",
                "Event Horizon",
                "Nostromo"
            ]
        },
        {
            "function_name": "calculate_signal_delay",
            "parameters": ["distance"],
            "description": "Calculate the time it takes for a signal to travel a certain distance in space. Divide the distance by the speed of light (299792458).",
            "input_type": "float",
            "answer_code": "def calculate_signal_delay(distance):\n    c = 299792458\n    return distance / c",
            "hint": "Divide the distance by the speed of light.",
            "test_inputs": [
                1.496e11,
                7.784e11,
                4.067e16,
                2.537e13,
                1e9
            ]
        },
        {
            "function_name": "capitalize_alien_message",
            "parameters": ["message"],
            "description": "Return the message with all letters capitalized.",
            "input_type": "string",
            "answer_code": "def capitalize_alien_message(message):\n    return message.upper()",
            "hint": "Use the upper() method.",
            "test_inputs": [
                "we come in peace",
                "take me to your leader",
                "live long and prosper",
                "may the force be with you",
                "so long and thanks for all the fish"
            ]
        },
        {
            "function_name": "split_transmission",
            "parameters": ["transmission"],
            "description": "Split the transmission into a list of words.",
            "input_type": "string",
            "answer_code": "def split_transmission(transmission):\n    return transmission.split()",
            "hint": "Use the split() method.",
            "test_inputs": [
                "hello earth",
                "message from mars",
                "initiate docking sequence",
                "prepare for hyperspace jump",
                "unknown signal detected"
            ]
        },
        {
            "function_name": "calculate_fuel_efficiency",
            "parameters": ["distance", "fuel"],
            "description": "Calculate the fuel efficiency of a starship. Divide the distance by the amount of fuel used.",
            "input_type": ["float", "float"],
            "answer_code": "def calculate_fuel_efficiency(distance, fuel):\n    return distance / fuel",
            "hint": "Divide the distance by the amount of fuel used.",
            "test_inputs": [
                [1000.0, 50.0],
                [5000.0, 200.0],
                [1200.0, 60.0],
                [2500.0, 125.0],
                [800.0, 40.0]
            ]
        },
        {
            "function_name": "format_droid_name",
            "parameters": ["droid_name"],
            "description": "Return the droid's name in uppercase with 'Droid: ' prefixed.",
            "input_type": "string",
            "answer_code": "def format_droid_name(droid_name):\n    return 'Droid: ' + droid_name.upper()",
            "hint": "Use the upper() method and string concatenation.",
            "test_inputs": [
                "R2D2",
                "C3PO",
                "BB8",
                "K2SO",
                "D0"
            ]
        },
        {
            "function_name": "calculate_planetary_year",
            "parameters": ["earth_years", "orbital_period"],
            "description": "Convert Earth years to years on another planet given its orbital period. Divide Earth years by the planet's orbital period in Earth years.",
            "input_type": ["float", "float"],
            "answer_code": "def calculate_planetary_year(earth_years, orbital_period):\n    return earth_years / orbital_period",
            "hint": "Divide Earth years by the planet's orbital period in Earth years.",
            "test_inputs": [
                [1, 0.241],
                [1, 0.615],
                [1, 1.88],
                [1, 11.86],
                [1, 29.46]
            ]
        },
        {
            "function_name": "get_last_character",
            "parameters": ["text"],
            "description": "Return the last character of the given string.",
            "input_type": "string",
            "answer_code": "def get_last_character(text):\n    return text[-1]",
            "hint": "Use negative indexing to get the last character.",
            "test_inputs": [
                "hello",
                "world",
                "alien",
                "spaceship",
                "galaxy"
            ]
        },
        {
            "function_name": "repeat_message",
            "parameters": ["message", "times"],
            "description": "Repeat the message a certain number of times.",
            "input_type": ["string", "int"],
            "answer_code": "def repeat_message(message, times):\n    return message * times",
            "hint": "Use the '*' operator to repeat the string.",
            "test_inputs": [
                ["beep ", 3],
                ["boop ", 2],
                ["ding ", 4],
                ["buzz ", 5],
                ["zap ", 6]
            ]
        },
        {
            "function_name": "calculate_cryo_sleep_duration",
            "parameters": ["trip_distance", "sleep_cycles"],
            "description": "Calculate the duration of each cryo-sleep cycle for the trip. Divide the total distance by the number of sleep cycles.",
            "input_type": ["float", "int"],
            "answer_code": "def calculate_cryo_sleep_duration(trip_distance, sleep_cycles):\n    return trip_distance / sleep_cycles",
            "hint": "Divide the total distance by the number of sleep cycles.",
            "test_inputs": [
                [1000.0, 5],
                [5000.0, 10],
                [750.0, 3],
                [2500.0, 2],
                [1200.0, 4]
            ]
        },
        {
            "function_name": "get_first_element",
            "parameters": ["lst"],
            "description": "Return the first element of the given list.",
            "input_type": "list",
            "answer_code": "def get_first_element(lst):\n    return lst[0]",
            "hint": "Use indexing to get the first element.",
            "test_inputs": [
                [1, 2, 3],
                ["Mars", "Venus", "Jupiter"],
                ["robot", "android", "cyborg"],
                [42],
                ["spaceship", "asteroid", "comet"]
            ]
        },
        {
            "function_name": "get_last_element",
            "parameters": ["lst"],
            "description": "Return the last element of the given list.",
            "input_type": "list",
            "answer_code": "def get_last_element(lst):\n    return lst[-1]",
            "hint": "Use negative indexing to get the last element.",
            "test_inputs": [
                [1, 2, 3],
                ["Mars", "Venus", "Jupiter"],
                ["robot", "android", "cyborg"],
                [42],
                ["spaceship", "asteroid", "comet"]
            ]
        },
        {
            "function_name": "get_sublist",
            "parameters": ["lst", "start", "end"],
            "description": "Return a sublist from 'start' index to 'end' index (exclusive).",
            "input_type": ["list", "int", "int"],
            "answer_code": "def get_sublist(lst, start, end):\n    return lst[start:end]",
            "hint": "Use slicing to get a sublist.",
            "test_inputs": [
                [["alpha", "beta", "gamma", "delta"], 1, 3],
                [["Earth", "Mars", "Venus", "Jupiter"], 0, 2],
                [[true, false, true], 0, 1],
                [["spaceship", "asteroid", "comet", "meteor"], 2, 4],
                [[42], 0, 1]
            ]
        },
        {
            "function_name": "remove_first_element",
            "parameters": ["lst"],
            "description": "Remove the first element from the list and return the modified list.",
            "input_type": "list",
            "answer_code": "def remove_first_element(lst):\n    return lst[1:]",
            "hint": "Use slicing to exclude the first element.",
            "test_inputs": [
                [1, 2, 3],
                ["spaceship", "asteroid", "comet"],
                ["robot", "android", "cyborg"],
                [42],
                ["Mars", "Venus", "Jupiter", "Saturn"]
            ]
        },
        {
            "function_name": "remove_last_element",
            "parameters": ["lst"],
            "description": "Remove the last element from the list and return the modified list.",
            "input_type": "list",
            "answer_code": "def remove_last_element(lst):\n    return lst[:-1]",
            "hint": "Use slicing to exclude the last element.",
            "test_inputs": [
                [1, 2, 3],
                ["spaceship", "asteroid", "comet"],
                ["robot", "android", "cyborg"],
                [42],
                ["Mars", "Venus", "Jupiter", "Saturn"]
            ]
        },
        {
            "function_name": "concatenate_lists",
            "parameters": ["lst1", "lst2"],
            "description": "Return the concatenation of two lists.",
            "input_type": ["list", "list"],
            "answer_code": "def concatenate_lists(lst1, lst2):\n    return lst1 + lst2",
            "hint": "Use the '+' operator to concatenate lists.",
            "test_inputs": [
                [["star", "planet"], ["galaxy", "universe"]],
                [["alpha"], ["beta", "gamma"]],
                [[true], [false, true]],
                [[], ["spaceship"]],
                [["robot"], ["android", "cyborg", "AI"]]
            ]
        },
        {
            "function_name": "repeat_list",
            "parameters": ["lst", "times"],
            "description": "Return the list repeated 'times' number of times.",
            "input_type": ["list", "int"],
            "answer_code": "def repeat_list(lst, times):\n    return lst * times",
            "hint": "Use the '*' operator to repeat the list.",
            "test_inputs": [
                [["photon"], 3],
                [["quark", "lepton"], 2],
                [["robot"], 4],
                [[], 5],
                [["nebula"], 0]
            ]
        },
        {
            "function_name": "remove_element",
            "parameters": ["lst", "element"],
            "description": "Return the list after removing the first occurrence of 'element'.",
            "input_type": ["list", "any"],
            "answer_code": "def remove_element(lst, element):\n    lst_copy = lst.copy()\n    lst_copy.remove(element)\n    return lst_copy",
            "hint": "Use the 'remove()' method to remove the element.",
            "test_inputs": [
                [["Earth", "Mars", "Venus"], "Mars"],
                [["robot", "android", "robot"], "robot"],
                [[true, false, true], true],
                [["asteroid", "asteroid", "asteroid"], "asteroid"],
                [[10, 20, 30, 40], 30]
            ]
        },
        {
            "function_name": "get_element_at_index",
            "parameters": ["lst", "index"],
            "description": "Return the element at the given 'index' in the list.",
            "input_type": ["list", "int"],
            "answer_code": "def get_element_at_index(lst, index):\n    return lst[index]",
            "hint": "Use indexing to get the element at 'index'.",
            "test_inputs": [
                [["photon", "neutron", "electron"], 0],
                [["alpha", "beta", "gamma"], 2],
                [[true, false], 1],
                [["black hole"], 0],
                [["star", "planet", "galaxy"], -1]
            ]
        },
        {
            "function_name": "reverse_list",
            "parameters": ["lst"],
            "description": "Return the reversed list.",
            "input_type": "list",
            "answer_code": "def reverse_list(lst):\n    return lst[::-1]",
            "hint": "Use slicing to reverse the list.",
            "test_inputs": [
                [1, 2, 3],
                ["Mars", "Venus", "Jupiter"],
                ["robot", "android", "cyborg"],
                [42],
                ["spaceship", "asteroid", "comet"]
            ]
        },
        {
            "function_name": "count_element_occurrences",
            "parameters": ["lst", "element"],
            "description": "Return the number of times 'element' occurs in the list.",
            "input_type": ["list", "any"],
            "answer_code": "def count_element_occurrences(lst, element):\n    return lst.count(element)",
            "hint": "Use the 'count()' method of lists.",
            "test_inputs": [
                [["star", "planet", "star", "galaxy"], "star"],
                [["robot", "android", "robot"], "robot"],
                [[true, false, true], true],
                [["asteroid", "asteroid", "asteroid"], "asteroid"],
                [["spaceship", "asteroid", "comet"], "black hole"]
            ]
        },
        {
            "function_name": "uppercase_first_letter",
            "parameters": ["text"],
            "description": "Return the text with the first letter in uppercase.",
            "input_type": "string",
            "answer_code": "def uppercase_first_letter(text):\n    return text[0].upper() + text[1:]",
            "hint": "Use indexing and the upper() method.",
            "test_inputs": [
                "alien",
                "spaceship",
                "galaxy",
                "nebula",
                "supernova"
            ]
        },
        {
            "function_name": "combine_and_reverse",
            "parameters": ["str1", "str2"],
            "description": "Combine two strings and return the reverse of the result.",
            "input_type": ["string", "string"],
            "answer_code": "def combine_and_reverse(str1, str2):\n    return (str1 + str2)[::-1]",
            "hint": "Use string concatenation and slicing.",
            "test_inputs": [
                ["star", "ship"],
                ["black", "hole"],
                ["time", "travel"],
                ["space", "station"],
                ["warp", "drive"]
            ]
        },
        {
            "function_name": "calculate_gravity_force",
            "parameters": ["mass1", "mass2", "distance"],
            "description": "Calculate the gravitational force between two masses.",
            "input_type": ["float", "float", "float"],
            "answer_code": "def calculate_gravity_force(mass1, mass2, distance):\n    G = 6.67430e-11\n    return G * (mass1 * mass2) / distance ** 2",
            "hint": "Use the formula F = G * (m1 * m2) / d^2.",
            "test_inputs": [
                [5.972e24, 7.348e22, 384400000],
                [1.989e30, 5.972e24, 1.496e11],
                [5.972e24, 1.0, 6.371e6],
                [7.348e22, 1.0, 1.737e6],
                [5.972e24, 5.972e24, 1.0e7]
            ]
        },
        {
            "function_name": "extract_planet_initials",
            "parameters": ["planets"],
            "description": "Return a string of the first letters of each planet in the list.",
            "input_type": ["list"],
            "answer_code": "def extract_planet_initials(planets):\n    return ''.join([planet[0] for planet in planets])",
            "hint": "Use list indexing and join the letters.",
            "test_inputs": [
                ["Mercury", "Venus", "Earth", "Mars"],
                ["Jupiter", "Saturn", "Uranus", "Neptune"],
                ["Earth", "Mars", "Venus"],
                ["Proxima Centauri b", "Kepler-22b"],
                ["Alpha", "Beta", "Gamma", "Delta"]
            ]
        },
        {
            "function_name": "multiply_string_length",
            "parameters": ["text", "number"],
            "description": "Return the text repeated by the length of the text multiplied by 'number'.",
            "input_type": ["string", "int"],
            "answer_code": "def multiply_string_length(text, number):\n    return text * (len(text) * number)",
            "hint": "Use len() and multiplication.",
            "test_inputs": [
                ["star", 2],
                ["galaxy", 1],
                ["quasar", 0],
                ["nebula", 3],
                ["comet", 2]
            ]
        },
        {
            "function_name": "format_star_date",
            "parameters": ["year", "month", "day"],
            "description": "Return the date formatted as 'Star Date: YYYY.MM.DD'.",
            "input_type": ["int", "int", "int"],
            "answer_code": "def format_star_date(year, month, day):\n    return f'Star Date: {year}.{month:02}.{day:02}'",
            "hint": "Use f-strings with zero-padded numbers.",
            "test_inputs": [
                [2265, 1, 4],
                [2371, 12, 25],
                [2151, 7, 9],
                [2293, 11, 19],
                [3187, 5, 17]
            ]
        },
        {
            "function_name": "sum_of_ascii_values",
            "parameters": ["text"],
            "description": "Return the sum of the ASCII values of all characters in the text.",
            "input_type": "string",
            "answer_code": "def sum_of_ascii_values(text):\n    return sum([ord(char) for char in text])",
            "hint": "Use ord() and sum().",
            "test_inputs": [
                "alien",
                "space",
                "quantum",
                "wormhole",
                "dimension"
            ]
        },
        {
            "function_name": "middle_element",
            "parameters": ["lst"],
            "description": "Return the middle element of the list.",
            "input_type": ["list"],
            "answer_code": "def middle_element(lst):\n    return lst[len(lst)//2]",
            "hint": "Use len() and integer division.",
            "test_inputs": [
                ["Earth", "Mars", "Venus"],
                ["star", "planet", "moon", "asteroid", "comet"],
                ["photon", "electron", "neutron"],
                ["robot", "android", "cyborg", "AI"],
                ["alpha", "beta", "gamma", "delta", "epsilon"]
            ]
        },
        {
            "function_name": "combine_first_and_last",
            "parameters": ["lst"],
            "description": "Return a string combining the first and last elements of the list.",
            "input_type": ["list"],
            "answer_code": "def combine_first_and_last(lst):\n    return lst[0] + lst[-1]",
            "hint": "Use indexing to access elements.",
            "test_inputs": [
                ["time", "space", "continuum"],
                ["warp", "drive"],
                ["hyper", "space", "jump"],
                ["light", "speed"],
                ["quantum", "entanglement"]
            ]
        },
        {
            "function_name": "slice_and_uppercase",
            "parameters": ["text", "start", "end"],
            "description": "Return the substring from 'start' to 'end' in uppercase.",
            "input_type": ["string", "int", "int"],
            "answer_code": "def slice_and_uppercase(text, start, end):\n    return text[start:end].upper()",
            "hint": "Use slicing and the upper() method.",
            "test_inputs": [
                ["wormhole", 0, 4],
                ["dimension", 3, 7],
                ["astronaut", 2, 6],
                ["spaceship", 1, 5],
                ["supernova", 4, 8]
            ]
        },
        {
            "function_name": "calculate_signal_strength",
            "parameters": ["base_strength", "distance"],
            "description": "Calculate the signal strength after attenuation over distance.",
            "input_type": ["float", "float"],
            "answer_code": "def calculate_signal_strength(base_strength, distance):\n    return base_strength / (distance ** 2)",
            "hint": "Use the inverse square law.",
            "test_inputs": [
                [1000.0, 10.0],
                [500.0, 5.0],
                [750.0, 15.0],
                [1200.0, 20.0],
                [900.0, 12.0]
            ]
        },
        {
            "function_name": "merge_and_sort_lists",
            "parameters": ["lst1", "lst2"],
            "description": "Merge two lists and return the sorted result.",
            "input_type": ["list", "list"],
            "answer_code": "def merge_and_sort_lists(lst1, lst2):\n    return sorted(lst1 + lst2)",
            "hint": "Use list concatenation and sorted().",
            "test_inputs": [
                [[3, 1, 4], [2, 5]],
                [["gamma", "alpha"], ["beta", "delta"]],
                [[42], [7, 13, 21]],
                [[true], [false, true]],
                [[5.5, 2.2], [3.3, 1.1]]
            ]
        },
        {
            "function_name": "double_middle_character",
            "parameters": ["text"],
            "description": "Return the text with the middle character doubled.",
            "input_type": "string",
            "answer_code": "def double_middle_character(text):\n    index = len(text) // 2\n    return text[:index] + text[index] + text[index:]",
            "hint": "Use len(), slicing, and concatenation.",
            "test_inputs": [
                "alien",
                "robot",
                "galaxy",
                "planet",
                "comet"
            ]
        },
        {
            "function_name": "average_of_list",
            "parameters": ["numbers"],
            "description": "Return the average of a list of numbers.",
            "input_type": ["list"],
            "answer_code": "def average_of_list(numbers):\n    return sum(numbers) / len(numbers)",
            "hint": "Use sum() and len().",
            "test_inputs": [
                [10, 20, 30],
                [5, 15, 25, 35],
                [2, 4, 6, 8, 10],
                [100, 200],
                [7, 14, 21, 28, 35, 42]
            ]
        },
        {
            "function_name": "capitalize_every_word",
            "parameters": ["text"],
            "description": "Return the text with every word capitalized.",
            "input_type": "string",
            "answer_code": "def capitalize_every_word(text):\n    return ' '.join([word.capitalize() for word in text.split()])",
            "hint": "Use split(), capitalize(), and join().",
            "test_inputs": [
                "alien invasion",
                "space odyssey",
                "time travel theories",
                "quantum mechanics",
                "deep space exploration"
            ]
        },
        {
            "function_name": "multiply_elements_and_sum",
            "parameters": ["numbers", "multiplier"],
            "description": "Multiply each element in the list by 'multiplier' and return the sum.",
            "input_type": ["list", "int"],
            "answer_code": "def multiply_elements_and_sum(numbers, multiplier):\n    return sum([num * multiplier for num in numbers])",
            "hint": "Use list comprehension and sum().",
            "test_inputs": [
                [[1, 2, 3], 2],
                [[5, 10, 15], 3],
                [[7, 14, 21], 1],
                [[0, 0, 0], 5],
                [[2, 4, 6, 8], 0]
            ]
        }
    ]
}
